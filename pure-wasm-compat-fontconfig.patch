applies to 452be8125f0e2a18a7dfef469e05d19374d36307

commit b99681a59c605871c816eeef76179b9d0afa271a
Author: Caleb Hearon <caleb@chearon.net>
Date:   Thu Mar 5 20:34:23 2020 -0500

    pure WASM compatible FontConfig build
    
    Changes - hopefully these will be individual commits soon:
    
    1. Removed FontConfig filesystem calls, caching, XML, serialization
    2. Removed multi thread support
    3. Wrapped calls to printf() with #ifdefs (browser build)
    4. Removed FreeType

diff --git a/Makefile.am b/Makefile.am
index cc3024e..37060b4 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -21,10 +21,7 @@
 #  TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 #  PERFORMANCE OF THIS SOFTWARE.
 
-SUBDIRS=fontconfig fc-case fc-lang src \
-	fc-cache fc-cat fc-conflist fc-list fc-match \
-	fc-pattern fc-query fc-scan fc-validate conf.d \
-	its po po-conf test
+SUBDIRS=fontconfig fc-lang src
 if ENABLE_DOCS
 SUBDIRS += doc
 endif
diff --git a/configure.ac b/configure.ac
index 394c281..1af68bc 100644
--- a/configure.ac
+++ b/configure.ac
@@ -332,114 +332,6 @@ AM_CONDITIONAL(FREETYPE_PCF_LONG_FAMILY_NAMES, test "x$have_pcf_long_family_name
 LIBS="$fontconfig_save_libs"
 CFLAGS="$fontconfig_save_cflags"
 
-#
-# Check expat configuration
-#
-AC_ARG_WITH(expat,
-	[AC_HELP_STRING([--with-expat=DIR],
-			[Use Expat in DIR])],
-	[expat_prefix=$withval],
-	[expat_prefix=auto])
-AC_ARG_WITH(expat-includes,
-	[AC_HELP_STRING([--with-expat-includes=DIR],
-			[Use Expat includes in DIR])],
-	[expat_includes=$withval],
-	[expat_includes=auto])
-AC_ARG_WITH(expat-lib,
-	[AC_HELP_STRING([--with-expat-lib=DIR])],
-	[expat_lib=$withval],
-	[expat_lib=auto])
-
-if test "$enable_libxml2" != "yes"; then
-	use_pkgconfig_for_expat=yes
-	if test "$expat_prefix" = "auto" -a "$expat_includes" = "auto" -a "$expat_lib" = "auto"; then
-		PKG_CHECK_MODULES(EXPAT, expat,,use_pkgconfig_for_expat=no)
-	else
-		use_pkgconfig_for_expat=no
-	fi
-	if test "x$use_pkgconfig_for_expat" = "xno"; then
-		if test "$expat_includes" != "auto" -a -r ${expat_includes}/expat.h; then
-			EXPAT_CFLAGS="-I${expat_includes}"
-		elif test "$expat_prefix" != "auto" -a -r ${expat_prefix}/include/expat.h; then
-			EXPAT_CFLAGS="-I${expat_prefix}/include"
-		else
-			EXPAT_CFLAGS=""
-		fi
-		if test "$expat_lib" != "auto"; then
-			EXPAT_LIBS="-L${expat_lib} -lexpat"
-		elif test "$expat_prefix" != "auto"; then
-			EXPAT_LIBS="-L${expat_prefix}/lib -lexpat"
-		else
-			EXPAT_LIBS="-lexpat"
-		fi
-		PKG_EXPAT_CFLAGS=$EXPAT_CFLAGS
-		PKG_EXPAT_LIBS=$EXPAT_LIBS
-	else
-		PKGCONFIG_REQUIRES_PRIVATELY="$PKGCONFIG_REQUIRES_PRIVATELY expat"
-		PKG_EXPAT_CFLAGS=
-		PKG_EXPAT_LIBS=
-	fi
-
-	expatsaved_CPPFLAGS="$CPPFLAGS"
-	expatsaved_LIBS="$LIBS"
-	CPPFLAGS="$CPPFLAGS $EXPAT_CFLAGS"
-	LIBS="$LIBS $EXPAT_LIBS"
-
-	AC_CHECK_HEADER(expat.h)
-	if test "$ac_cv_header_expat_h" = "no"; then
-		AC_CHECK_HEADER(xmlparse.h)
-		if test "$ac_cv_header_xmlparse_h" = "yes"; then
-			HAVE_XMLPARSE_H=1
-			AC_SUBST(HAVE_XMLPARSE_H)
-			AC_DEFINE_UNQUOTED(HAVE_XMLPARSE_H,$HAVE_XMLPARSE_H,
-				[Use xmlparse.h instead of expat.h])
-		else
-			AC_MSG_ERROR([
-*** expat is required. or try to use --enable-libxml2])
-		fi
-	fi
-	AC_CHECK_FUNCS(XML_SetDoctypeDeclHandler)
-	if test "$ac_cv_func_XML_SetDoctypeDeclHandler" = "no"; then
-		AC_MSG_ERROR([
-*** expat is required. or try to use --enable-libxml2])
-	fi
-	CPPFLAGS="$expatsaved_CPPFLAGS"
-	LIBS="$expatsaved_LIBS"
-
-	AC_SUBST(EXPAT_CFLAGS)
-	AC_SUBST(EXPAT_LIBS)
-	AC_SUBST(PKG_EXPAT_CFLAGS)
-	AC_SUBST(PKG_EXPAT_LIBS)
-fi
-
-#
-# Check libxml2 configuration
-#
-AC_ARG_ENABLE(libxml2,
-	[AC_HELP_STRING([--enable-libxml2],
-			[Use libxml2 instead of Expat])])
-
-if test "$enable_libxml2" = "yes"; then
-    PKG_CHECK_MODULES([LIBXML2], [libxml-2.0 >= 2.6])
-    PKGCONFIG_REQUIRES_PRIVATELY="$PKGCONFIG_REQUIRES_PRIVATELY libxml-2.0 >= 2.6"
-    AC_DEFINE_UNQUOTED(ENABLE_LIBXML2,1,[Use libxml2 instead of Expat])
-
-    AC_SUBST(LIBXML2_CFLAGS)
-    AC_SUBST(LIBXML2_LIBS)
-
-    fc_saved_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS $LIBXML2_CFLAGS"
-    AC_MSG_CHECKING([SAX1 support in libxml2])
-    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[
-	#include <libxml/xmlversion.h>
-	#if !defined(LIBXML_SAX1_ENABLED)
-	#  include "error: No SAX1 support in libxml2"
-	#endif
-	]])], [AC_MSG_RESULT([found])], [AC_MSG_ERROR([
-*** SAX1 support in libxml2 is required. enable it or use expat instead.])])
-    CFLAGS="$fc_saved_CFLAGS"
-fi
-
 #
 # Check json-c
 #
diff --git a/fc-lang/fc-lang.c b/fc-lang/fc-lang.c
index 503d712..dc55cef 100644
--- a/fc-lang/fc-lang.c
+++ b/fc-lang/fc-lang.c
@@ -22,6 +22,8 @@
  * PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include <stdio.h>
+
 #include "fccharset.c"
 #include "fcstr.c"
 #include "fcserialize.c"
diff --git a/fontconfig/fcprivate.h b/fontconfig/fcprivate.h
index 23021b2..88edeb0 100644
--- a/fontconfig/fcprivate.h
+++ b/fontconfig/fcprivate.h
@@ -71,9 +71,6 @@
 	case FcTypeCharSet:					    \
 	    __v__.u.c = va_arg (va, const FcCharSet *); 	    \
 	    break;						    \
-	case FcTypeFTFace:					    \
-	    __v__.u.f = va_arg (va, FT_Face);			    \
-	    break;						    \
 	case FcTypeLangSet:					    \
 	    __v__.u.l = va_arg (va, const FcLangSet *);		    \
 	    break;						    \
diff --git a/fontconfig/fontconfig.h b/fontconfig/fontconfig.h
index c795245..5266967 100644
--- a/fontconfig/fontconfig.h
+++ b/fontconfig/fontconfig.h
@@ -25,8 +25,6 @@
 #ifndef _FONTCONFIG_H_
 #define _FONTCONFIG_H_
 
-#include <sys/types.h>
-#include <sys/stat.h>
 #include <stdarg.h>
 #include <limits.h>
 
@@ -206,7 +204,6 @@ typedef enum _FcType {
     FcTypeBool,
     FcTypeMatrix,
     FcTypeCharSet,
-    FcTypeFTFace,
     FcTypeLangSet,
     FcTypeRange
 } FcType;
diff --git a/src/Makefile.am b/src/Makefile.am
index 35e820d..4281f04 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -87,7 +87,7 @@ EXTRA_DIST += makealias
 
 noinst_HEADERS=fcint.h fcftint.h fcdeprecate.h fcstdint.h
 
-ALIAS_FILES = fcalias.h fcaliastail.h fcftalias.h fcftaliastail.h
+ALIAS_FILES = 
 
 BUILT_SOURCES = $(ALIAS_FILES) \
 	../fc-case/fccase.h \
@@ -96,7 +96,7 @@ BUILT_SOURCES = $(ALIAS_FILES) \
 	$(builddir)/fcobjshash.h \
 	fcobjshash.gperf
 
-noinst_PROGRAMS = fcarch
+noinst_PROGRAMS = 
 
 ../fc-case/fccase.h:
 	cd ../fc-case && $(MAKE) $(AM_MAKEFLAGS) fccase.h
@@ -126,40 +126,23 @@ EXTRA_DIST += \
 	fcobjshash.gperf.h
 
 libfontconfig_la_SOURCES = \
-	fcarch.h \
-	fcatomic.c \
-	fcatomic.h \
-	fccache.c \
 	fccfg.c \
 	fccharset.c \
-	fccompat.c \
 	fcdbg.c \
 	fcdefault.c \
-	fcdir.c \
-	fcformat.c \
-	fcfreetype.c \
 	fcfs.c \
 	fcptrlist.c \
-	fchash.c \
-	fcinit.c \
 	fclang.c \
 	fclist.c \
 	fcmatch.c \
 	fcmatrix.c \
-	fcmutex.h \
 	fcname.c \
 	fcobjs.c \
 	fcobjs.h \
 	fcpat.c \
 	fcrange.c \
-	fcserialize.c \
-	fcstat.c \
-	fcstr.c \
 	fcweight.c \
-	fcwindows.h \
-	fcxml.c \
-	ftglue.h \
-	ftglue.c
+	fcstr.c
 
 lib_LTLIBRARIES = libfontconfig.la
 
@@ -184,11 +167,6 @@ PUBLIC_FILES = \
 PUBLIC_FT_FILES = \
 	$(top_srcdir)/fontconfig/fcfreetype.h
 
-fcaliastail.h: fcalias.h
-
-fcalias.h: $(top_srcdir)/src/makealias $(PUBLIC_FILES)
-	$(AM_V_GEN) sh $(top_srcdir)/src/makealias "$(top_srcdir)/src" fcalias.h fcaliastail.h $(PUBLIC_FILES)
-
 fcftaliastail.h: fcftalias.h
 
 fcftalias.h: $(top_srcdir)/src/makealias $(PUBLIC_FT_FILES)
diff --git a/src/fcatomic.h b/src/fcatomic.h
index cc28a88..44a2029 100644
--- a/src/fcatomic.h
+++ b/src/fcatomic.h
@@ -136,9 +136,9 @@ typedef int fc_atomic_int_t;
 #define FC_REF_CONSTANT {FC_REF_CONSTANT_VALUE}
 typedef struct _FcRef { fc_atomic_int_t count; } FcRef;
 static inline void   FcRefInit     (FcRef *r, int v) { r->count = v; }
-static inline int    FcRefInc      (FcRef *r) { return fc_atomic_int_add (r->count, +1); }
-static inline int    FcRefDec      (FcRef *r) { return fc_atomic_int_add (r->count, -1); }
-static inline int    FcRefAdd      (FcRef *r, int v) { return fc_atomic_int_add (r->count, v); }
+static inline int    FcRefInc      (FcRef *r) { r->count += 1; return r->count - 1; }
+static inline int    FcRefDec      (FcRef *r) { r->count -= 1; return r->count + 1; }
+static inline int    FcRefAdd      (FcRef *r, int v) { r->count += v; return r->count - v; }
 static inline void   FcRefSetConst (FcRef *r) { r->count = FC_REF_CONSTANT_VALUE; }
 static inline FcBool FcRefIsConst  (const FcRef *r) { return r->count == FC_REF_CONSTANT_VALUE; }
 
diff --git a/src/fccfg.c b/src/fccfg.c
index 30f37af..14d5e07 100644
--- a/src/fccfg.c
+++ b/src/fccfg.c
@@ -32,119 +32,127 @@
 #define R_OK 4
 #endif
 
-static FcConfig    *_fcConfig; /* MT-safe */
-static FcMutex	   *_lock;
 
-static void
-lock_config (void)
-{
-    FcMutex *lock;
-retry:
-    lock = fc_atomic_ptr_get (&_lock);
-    if (!lock)
-    {
-	lock = (FcMutex *) malloc (sizeof (FcMutex));
-	FcMutexInit (lock);
-	if (!fc_atomic_ptr_cmpexch (&_lock, NULL, lock))
-	{
-	    FcMutexFinish (lock);
-	    goto retry;
-	}
-	FcMutexLock (lock);
-	/* Initialize random state */
-	FcRandom ();
-	return;
-    }
-    FcMutexLock (lock);
-}
-
-static void
-unlock_config (void)
+unsigned int
+FcFreeTypeQueryAll(const FcChar8	*file,
+		   unsigned int		id,
+		   FcBlanks		*blanks,
+		   int			*count,
+		   FcFontSet            *set)
 {
-    FcMutexUnlock (_lock);
+    // TODO add fonts to font set id, blanks, count are unused
+    return 0;
 }
 
-static void
-free_lock (void)
+static FcBool
+FcFileScanFontConfig (FcFontSet		*set,
+		      const FcChar8	*file,
+		      FcConfig		*config)
 {
-    FcMutex *lock;
+    int		i;
+    FcBool	ret = FcTrue;
+    int		old_nfont = set->nfont;
+    const FcChar8 *sysroot = FcConfigGetSysRoot (config);
 
-    lock = fc_atomic_ptr_get (&_lock);
-    if (lock && fc_atomic_ptr_cmpexch (&_lock, lock, NULL))
+#ifdef WASI_RUNTIME
+    if (FcDebug () & FC_DBG_SCAN)
     {
-	FcMutexFinish (lock);
-	free (lock);
+	printf ("\tScanning file %s...", file);
     }
-}
+#endif
 
-static FcConfig *
-FcConfigEnsure (void)
-{
-    FcConfig	*config;
-retry:
-    config = fc_atomic_ptr_get (&_fcConfig);
-    if (!config)
+    if (!FcFreeTypeQueryAll (file, -1, NULL, NULL, set))
+	return FcFalse;
+
+#ifdef WASI_RUNTIME
+    if (FcDebug () & FC_DBG_SCAN)
+	printf ("done\n");
+#endif
+
+    for (i = old_nfont; i < set->nfont; i++)
     {
-	config = FcInitLoadConfigAndFonts ();
+	FcPattern *font = set->fonts[i];
 
-	if (!config || !fc_atomic_ptr_cmpexch (&_fcConfig, NULL, config)) {
-	    if (config)
-		FcConfigDestroy (config);
-	    goto retry;
+	/*
+	 * Get rid of sysroot here so that targeting scan rule may contains FC_FILE pattern
+	 * and they should usually expect without sysroot.
+	 */
+	if (sysroot)
+	{
+	    size_t len = strlen ((const char *)sysroot);
+	    FcChar8 *f = NULL;
+
+	    if (FcPatternObjectGetString (font, FC_FILE_OBJECT, 0, &f) == FcResultMatch &&
+		strncmp ((const char *)f, (const char *)sysroot, len) == 0)
+	    {
+		FcChar8 *s = FcStrdup (f);
+		FcPatternObjectDel (font, FC_FILE_OBJECT);
+		if (s[len] != '/')
+		    len--;
+		else if (s[len+1] == '/')
+		    len++;
+		FcPatternObjectAddString (font, FC_FILE_OBJECT, &s[len]);
+		FcStrFree (s);
+	    }
 	}
-    }
-    return config;
-}
 
-static void
-FcDestroyAsRule (void *data)
-{
-    FcRuleDestroy (data);
-}
+	/*
+	 * Edit pattern with user-defined rules
+	 */
+	if (config && !FcConfigSubstitute (config, font, FcMatchScan))
+	    ret = FcFalse;
 
-static void
-FcDestroyAsRuleSet (void *data)
-{
-    FcRuleSetDestroy (data);
-}
+	if (FcDebug() & FC_DBG_SCANV)
+	{
+#ifdef WASI_RUNTIME
+	    printf ("Final font pattern:\n");
+	    FcPatternPrint (font);
+#endif
+	}
+    }
 
-FcBool
-FcConfigInit (void)
-{
-  return FcConfigEnsure () ? FcTrue : FcFalse;
+    return ret;
 }
 
-void
-FcConfigFini (void)
+FcBool
+FcConfigAddFile (FcConfig	*config,
+		 FcPattern	*pat)
 {
-    FcConfig *cfg = fc_atomic_ptr_get (&_fcConfig);
-    if (cfg && fc_atomic_ptr_cmpexch (&_fcConfig, cfg, NULL))
-	FcConfigDestroy (cfg);
-    free_lock ();
-}
+    FcBool 	ret = FcTrue;
+    FcFontSet	*set;
 
-static FcChar8 *
-FcConfigRealPath(const FcChar8 *path)
-{
-    char	resolved_name[PATH_MAX+1];
-    char	*resolved_ret;
+    config = FcConfigReference (config);
+    if (!config)
+	return FcFalse;
 
-    if (!path)
-	return NULL;
+    set = FcConfigGetFonts (config, FcSetApplication);
+    if (!set)
+    {
+	set = FcFontSetCreate ();
+	if (!set)
+	{
+	    ret = FcFalse;
+	    goto bail;
+	}
+	FcConfigSetFonts (config, set, FcSetApplication);
+    }
 
-#ifndef _WIN32
-    resolved_ret = realpath((const char *) path, resolved_name);
-#else
-    if (GetFullPathNameA ((LPCSTR) path, PATH_MAX, resolved_name, NULL) == 0)
+    if (!FcFontSetAdd(set, pat))
     {
-        fprintf (stderr, "Fontconfig warning: GetFullPathNameA failed.\n");
-        return NULL;
+	ret = FcFalse;
+	goto bail;
     }
-    resolved_ret = resolved_name;
-#endif
-    if (resolved_ret)
-	path = (FcChar8 *) resolved_ret;
-    return FcStrCopyFilename(path);
+
+bail:
+    FcConfigDestroy(config);
+
+    return ret;
+}
+
+static void
+FcDestroyAsRuleSet (void *data)
+{
+    FcRuleSetDestroy (data);
 }
 
 FcConfig *
@@ -208,12 +216,12 @@ FcConfigCreate (void)
     for (set = FcSetSystem; set <= FcSetApplication; set++)
 	config->fonts[set] = 0;
 
-    config->rescanTime = time(0);
+    config->rescanTime = 0;
     config->rescanInterval = 30;
 
     config->expr_pool = NULL;
 
-    config->sysRoot = FcConfigRealPath((const FcChar8 *) getenv("FONTCONFIG_SYSROOT"));
+    config->sysRoot = (FcChar8 *) "";
 
     config->rulesetList = FcPtrListCreate (FcDestroyAsRuleSet);
     if (!config->rulesetList)
@@ -255,69 +263,6 @@ bail0:
     return 0;
 }
 
-static FcFileTime
-FcConfigNewestFile (FcStrSet *files)
-{
-    FcStrList	    *list = FcStrListCreate (files);
-    FcFileTime	    newest = { 0, FcFalse };
-    FcChar8	    *file;
-    struct  stat    statb;
-
-    if (list)
-    {
-	while ((file = FcStrListNext (list)))
-	    if (FcStat (file, &statb) == 0)
-		if (!newest.set || statb.st_mtime - newest.time > 0)
-		{
-		    newest.set = FcTrue;
-		    newest.time = statb.st_mtime;
-		}
-	FcStrListDone (list);
-    }
-    return newest;
-}
-
-FcBool
-FcConfigUptoDate (FcConfig *config)
-{
-    FcFileTime	config_time, config_dir_time, font_time;
-    time_t	now = time(0);
-    FcBool	ret = FcTrue;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return FcFalse;
-
-    config_time = FcConfigNewestFile (config->configFiles);
-    config_dir_time = FcConfigNewestFile (config->configDirs);
-    font_time = FcConfigNewestFile (config->fontDirs);
-    if ((config_time.set && config_time.time - config->rescanTime > 0) ||
-	(config_dir_time.set && (config_dir_time.time - config->rescanTime) > 0) ||
-	(font_time.set && (font_time.time - config->rescanTime) > 0))
-    {
-	/* We need to check for potential clock problems here (OLPC ticket #6046) */
-	if ((config_time.set && (config_time.time - now) > 0) ||
-    	(config_dir_time.set && (config_dir_time.time - now) > 0) ||
-        (font_time.set && (font_time.time - now) > 0))
-	{
-	    fprintf (stderr,
-                    "Fontconfig warning: Directory/file mtime in the future. New fonts may not be detected.\n");
-	    config->rescanTime = now;
-	    goto bail;
-	}
-	else
-	{
-	    ret = FcFalse;
-	    goto bail;
-	}
-    }
-    config->rescanTime = now;
-bail:
-    FcConfigDestroy (config);
-
-    return ret;
-}
-
 FcExpr *
 FcConfigAllocExpr (FcConfig *config)
 {
@@ -340,32 +285,7 @@ FcConfigAllocExpr (FcConfig *config)
 FcConfig *
 FcConfigReference (FcConfig *config)
 {
-    if (!config)
-    {
-	/* lock during obtaining the value from _fcConfig and count up refcount there,
-	 * there are the race between them.
-	 */
-	lock_config ();
-    retry:
-	config = fc_atomic_ptr_get (&_fcConfig);
-	if (!config)
-	{
-	    unlock_config ();
-
-	    config = FcInitLoadConfigAndFonts ();
-	    if (!config)
-		goto retry;
-	    lock_config ();
-	    if (!fc_atomic_ptr_cmpexch (&_fcConfig, NULL, config))
-	    {
-		FcConfigDestroy (config);
-		goto retry;
-	    }
-	}
-	FcRefInc (&config->ref);
-	unlock_config ();
-    }
-    else
+    if (config)
 	FcRefInc (&config->ref);
 
     return config;
@@ -381,8 +301,6 @@ FcConfigDestroy (FcConfig *config)
     if (FcRefDec (&config->ref) != 1)
 	return;
 
-    (void) fc_atomic_ptr_cmpexch (&_fcConfig, config, NULL);
-
     FcStrSetDestroy (config->configDirs);
     FcStrSetDestroy (config->configMapDirs);
     FcStrSetDestroy (config->fontDirs);
@@ -414,205 +332,6 @@ FcConfigDestroy (FcConfig *config)
     free (config);
 }
 
-/*
- * Add cache to configuration, adding fonts and directories
- */
-
-FcBool
-FcConfigAddCache (FcConfig *config, FcCache *cache,
-		  FcSetName set, FcStrSet *dirSet, FcChar8 *forDir)
-{
-    FcFontSet	*fs;
-    intptr_t	*dirs;
-    int		i;
-    FcBool      relocated = FcFalse;
-
-    if (strcmp ((char *)FcCacheDir(cache), (char *)forDir) != 0)
-      relocated = FcTrue;
-
-    /*
-     * Add fonts
-     */
-    fs = FcCacheSet (cache);
-    if (fs)
-    {
-	int	nref = 0;
-	
-	for (i = 0; i < fs->nfont; i++)
-	{
-	    FcPattern	*font = FcFontSetFont (fs, i);
-	    FcChar8	*font_file;
-	    FcChar8	*relocated_font_file = NULL;
-
-	    if (FcPatternObjectGetString (font, FC_FILE_OBJECT,
-					  0, &font_file) == FcResultMatch)
-	    {
-		if (relocated)
-		  {
-		    FcChar8 *slash = FcStrLastSlash (font_file);
-		    relocated_font_file = FcStrBuildFilename (forDir, slash + 1, NULL);
-		    font_file = relocated_font_file;
-		  }
-
-		/*
-		 * Check to see if font is banned by filename
-		 */
-		if (!FcConfigAcceptFilename (config, font_file))
-		{
-		    free (relocated_font_file);
-		    continue;
-		}
-	    }
-
-	    /*
-	     * Check to see if font is banned by pattern
-	     */
-	    if (!FcConfigAcceptFont (config, font))
-	    {
-		free (relocated_font_file);
-		continue;
-	    }
-
-	    if (relocated_font_file)
-	    {
-	      font = FcPatternCacheRewriteFile (font, cache, relocated_font_file);
-	      free (relocated_font_file);
-	    }
-
-	    if (FcFontSetAdd (config->fonts[set], font))
-		nref++;
-	}
-	FcDirCacheReference (cache, nref);
-    }
-
-    /*
-     * Add directories
-     */
-    dirs = FcCacheDirs (cache);
-    if (dirs)
-    {
-	for (i = 0; i < cache->dirs_count; i++)
-	{
-	    const FcChar8 *dir = FcCacheSubdir (cache, i);
-	    FcChar8 *s = NULL;
-
-	    if (relocated)
-	    {
-		FcChar8 *base = FcStrBasename (dir);
-		dir = s = FcStrBuildFilename (forDir, base, NULL);
-		FcStrFree (base);
-	    }
-	    if (FcConfigAcceptFilename (config, dir))
-		FcStrSetAddFilename (dirSet, dir);
-	    if (s)
-		FcStrFree (s);
-	}
-    }
-    return FcTrue;
-}
-
-static FcBool
-FcConfigAddDirList (FcConfig *config, FcSetName set, FcStrSet *dirSet)
-{
-    FcStrList	    *dirlist;
-    FcChar8	    *dir;
-    FcCache	    *cache;
-
-    dirlist = FcStrListCreate (dirSet);
-    if (!dirlist)
-        return FcFalse;
-	
-    while ((dir = FcStrListNext (dirlist)))
-    {
-	if (FcDebug () & FC_DBG_FONTSET)
-	    printf ("adding fonts from %s\n", dir);
-	cache = FcDirCacheRead (dir, FcFalse, config);
-	if (!cache)
-	    continue;
-	FcConfigAddCache (config, cache, set, dirSet, dir);
-	FcDirCacheUnload (cache);
-    }
-    FcStrListDone (dirlist);
-    return FcTrue;
-}
-
-/*
- * Scan the current list of directories in the configuration
- * and build the set of available fonts.
- */
-
-FcBool
-FcConfigBuildFonts (FcConfig *config)
-{
-    FcFontSet	    *fonts;
-    FcBool	    ret = FcTrue;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return FcFalse;
-	
-    fonts = FcFontSetCreate ();
-    if (!fonts)
-    {
-	ret = FcFalse;
-	goto bail;
-    }
-
-    FcConfigSetFonts (config, fonts, FcSetSystem);
-
-    if (!FcConfigAddDirList (config, FcSetSystem, config->fontDirs))
-    {
-	ret = FcFalse;
-	goto bail;
-    }
-    if (FcDebug () & FC_DBG_FONTSET)
-	FcFontSetPrint (fonts);
-bail:
-    FcConfigDestroy (config);
-
-    return ret;
-}
-
-FcBool
-FcConfigSetCurrent (FcConfig *config)
-{
-    FcConfig *cfg;
-
-    if (config)
-    {
-	if (!config->fonts[FcSetSystem])
-	    if (!FcConfigBuildFonts (config))
-		return FcFalse;
-	FcRefInc (&config->ref);
-    }
-
-    lock_config ();
-retry:
-    cfg = fc_atomic_ptr_get (&_fcConfig);
-
-    if (config == cfg)
-    {
-	unlock_config ();
-	if (config)
-	    FcConfigDestroy (config);
-	return FcTrue;
-    }
-
-    if (!fc_atomic_ptr_cmpexch (&_fcConfig, cfg, config))
-	goto retry;
-    unlock_config ();
-    if (cfg)
-	FcConfigDestroy (cfg);
-
-    return FcTrue;
-}
-
-FcConfig *
-FcConfigGetCurrent (void)
-{
-    return FcConfigEnsure ();
-}
-
 FcBool
 FcConfigAddConfigDir (FcConfig	    *config,
 		      const FcChar8 *d)
@@ -642,6 +361,7 @@ FcConfigAddFontDir (FcConfig	    *config,
 {
     if (FcDebug() & FC_DBG_CACHE)
     {
+#ifdef WASI_RUNTIME
 	if (m)
 	{
 	    printf ("%s -> %s%s%s%s\n", d, m, salt ? " (salt: " : "", salt ? (const char *)salt : "", salt ? ")" : "");
@@ -650,6 +370,7 @@ FcConfigAddFontDir (FcConfig	    *config,
 	{
 	    printf ("%s%s%s%s\n", d, salt ? " (salt: " : "", salt ? (const char *)salt : "", salt ? ")" : "");
 	}
+#endif
     }
     return FcStrSetAddFilenamePairWithSalt (config->fontDirs, d, m, salt);
 }
@@ -659,7 +380,9 @@ FcConfigResetFontDirs (FcConfig *config)
 {
     if (FcDebug() & FC_DBG_CACHE)
     {
+#ifdef WASI_RUNTIME
 	printf ("Reset font directories!\n");
+#endif
     }
     return FcStrSetDeleteAll (config->fontDirs);
 }
@@ -752,83 +475,30 @@ FcConfigMapSalt (FcConfig      *config,
     return FcStrTripleThird (dir);
 }
 
-FcBool
-FcConfigAddCacheDir (FcConfig	    *config,
-		     const FcChar8  *d)
+
+FcChar8 *
+FcConfigGetCache (FcConfig  *config FC_UNUSED)
 {
-    return FcStrSetAddFilename (config->cacheDirs, d);
+    return NULL;
 }
 
-FcStrList *
-FcConfigGetCacheDirs (FcConfig *config)
+FcFontSet *
+FcConfigGetFonts (FcConfig	*config,
+		  FcSetName	set)
 {
-    FcStrList *ret;
-
-    config = FcConfigReference (config);
     if (!config)
-	return NULL;
-    ret = FcStrListCreate (config->cacheDirs);
-    FcConfigDestroy (config);
-
-    return ret;
+        return 0;
+    return config->fonts[set];
 }
 
-FcBool
-FcConfigAddConfigFile (FcConfig	    *config,
-		       const FcChar8   *f)
+void
+FcConfigSetFonts (FcConfig	*config,
+		  FcFontSet	*fonts,
+		  FcSetName	set)
 {
-    FcBool	ret;
-    FcChar8	*file = FcConfigGetFilename (config, f);
-
-    if (!file)
-	return FcFalse;
-
-    ret = FcStrSetAdd (config->configFiles, file);
-    FcStrFree (file);
-    return ret;
-}
-
-FcStrList *
-FcConfigGetConfigFiles (FcConfig    *config)
-{
-    FcStrList *ret;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return NULL;
-    ret = FcStrListCreate (config->configFiles);
-    FcConfigDestroy (config);
-
-    return ret;
-}
-
-FcChar8 *
-FcConfigGetCache (FcConfig  *config FC_UNUSED)
-{
-    return NULL;
-}
-
-FcFontSet *
-FcConfigGetFonts (FcConfig	*config,
-		  FcSetName	set)
-{
-    if (!config)
-    {
-	config = FcConfigGetCurrent ();
-	if (!config)
-	    return 0;
-    }
-    return config->fonts[set];
-}
-
-void
-FcConfigSetFonts (FcConfig	*config,
-		  FcFontSet	*fonts,
-		  FcSetName	set)
-{
-    if (config->fonts[set])
-	FcFontSetDestroy (config->fonts[set]);
-    config->fonts[set] = fonts;
+    if (config->fonts[set])
+	FcFontSetDestroy (config->fonts[set]);
+    config->fonts[set] = fonts;
 }
 
 
@@ -1131,21 +801,6 @@ FcConfigCompareValue (const FcValue	*left_o,
 		break;
 	    }
 	    break;
-	case FcTypeFTFace:
-	    switch ((int) op) {
-	    case FcOpEqual:
-	    case FcOpContains:
-	    case FcOpListing:
-		ret = left.u.f == right.u.f;
-		break;
-	    case FcOpNotEqual:
-	    case FcOpNotContains:
-		ret = left.u.f != right.u.f;
-		break;
-	    default:
-		break;
-	    }
-	    break;
 	case FcTypeRange:
 	    ret = FcRangeCompare (op, left.u.r, right.u.r);
 	    break;
@@ -1240,8 +895,10 @@ FcConfigEvaluate (FcPattern *p, FcPattern *p_pat, FcMatchKind kind, FcExpr *e)
 	}
 	else if (kind == FcMatchPattern && e->u.name.kind == FcMatchFont)
 	{
+#ifdef WASI_RUNTIME
 	    fprintf (stderr,
                     "Fontconfig warning: <name> tag has target=\"font\" in a <match target=\"pattern\">.\n");
+#endif
 	    v.type = FcTypeVoid;
 	}
 	else
@@ -1608,14 +1265,18 @@ FcConfigAdd (FcValueListPtr *head,
     {
 	if (!FcObjectValidType (object, l->value.type))
 	{
+#ifdef WASI_RUNTIME
 	    fprintf (stderr,
 		     "Fontconfig warning: FcPattern object %s does not accept value", FcObjectName (object));
 	    FcValuePrintFile (stderr, l->value);
 	    fprintf (stderr, "\n");
+#endif
 
 	    if (FcDebug () & FC_DBG_EDIT)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Not adding\n");
+#endif
 	    }
 
 	    return FcFalse;
@@ -1654,16 +1315,20 @@ FcConfigAdd (FcValueListPtr *head,
 
 	if (FcDebug () & FC_DBG_EDIT)
 	{
+#ifdef WASI_RUNTIME
 	    if (*prev == NULL)
 		printf ("position not on list\n");
+#endif
 	}
     }
 
     if (FcDebug () & FC_DBG_EDIT)
     {
+#ifdef WASI_RUNTIME
 	printf ("%s list before ", append ? "Append" : "Prepend");
 	FcValueListPrintWithPosition (*head, *prev);
 	printf ("\n");
+#endif
     }
 
     if (new)
@@ -1678,9 +1343,11 @@ FcConfigAdd (FcValueListPtr *head,
 
     if (FcDebug () & FC_DBG_EDIT)
     {
+#ifdef WASI_RUNTIME
 	printf ("%s list after ", append ? "Append" : "Prepend");
 	FcValueListPrint (*head);
 	printf ("\n");
+#endif
     }
 
     return FcTrue;
@@ -1858,8 +1525,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 
     if (FcDebug () & FC_DBG_EDIT)
     {
+#ifdef WASI_RUNTIME
 	printf ("FcConfigSubstitute ");
 	FcPatternPrint (p);
+#endif
     }
     FcPtrListIterInit (s, &iter);
     for (; FcPtrListIterIsValid (s, &iter); FcPtrListIterNext (s, &iter))
@@ -1867,7 +1536,9 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 	rs = (FcRuleSet *) FcPtrListIterGetValue (s, &iter);
 	if (FcDebug () & FC_DBG_EDIT)
 	{
+#ifdef WASI_RUNTIME
 	    printf ("\nRule Set: %s\n", rs->name);
+#endif
 	}
 	FcPtrListIterInit (rs->subst[kind], &iter2);
 	for (; FcPtrListIterIsValid (rs->subst[kind], &iter2); FcPtrListIterNext (rs->subst[kind], &iter2))
@@ -1893,8 +1564,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 		     */
 		    if (FcDebug () & FC_DBG_EDIT)
 		    {
+#ifdef WASI_RUNTIME
 			printf ("FcConfigSubstitute test ");
 			FcTestPrint (r->u.test);
+#endif
 		    }
 		    if (kind == FcMatchFont && r->u.test->kind == FcMatchPattern)
 			m = p_pat;
@@ -1923,8 +1596,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 			}
 			else
 			{
+#ifdef WASI_RUNTIME
 			    if (FcDebug () & FC_DBG_EDIT)
 				printf ("No match\n");
+#endif
 			    goto bail;
 			}
 		    }
@@ -1940,8 +1615,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 			(r->u.test->qual == FcQualFirst && vl != e->values) ||
 			(r->u.test->qual == FcQualNotFirst && vl == e->values))
 		    {
+#ifdef WASI_RUNTIME
 			if (FcDebug () & FC_DBG_EDIT)
 			    printf ("No match\n");
+#endif
 			goto bail;
 		    }
 		    break;
@@ -1949,9 +1626,11 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 		    object = FC_OBJ_ID (r->u.edit->object);
 		    if (FcDebug () & FC_DBG_EDIT)
 		    {
+#ifdef WASI_RUNTIME
 			printf ("Substitute ");
 			FcEditPrint (r->u.edit);
 			printf ("\n\n");
+#endif
 		    }
 		    /*
 		     * Evaluate the list of expressions
@@ -2045,8 +1724,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
 
 		    if (FcDebug () & FC_DBG_EDIT)
 		    {
+#ifdef WASI_RUNTIME
 			printf ("FcConfigSubstitute edit");
 			FcPatternPrint (p);
+#endif
 		    }
 		    break;
 		}
@@ -2056,8 +1737,10 @@ FcConfigSubstituteWithPat (FcConfig    *config,
     }
     if (FcDebug () & FC_DBG_EDIT)
     {
+#ifdef WASI_RUNTIME
 	printf ("FcConfigSubstitute done");
 	FcPatternPrint (p);
+#endif
     }
 bail1:
     if (elt)
@@ -2140,469 +1823,6 @@ DllMain (HINSTANCE hinstDLL,
 #define FONTCONFIG_FILE	"fonts.conf"
 #endif
 
-static FcChar8 *
-FcConfigFileExists (const FcChar8 *dir, const FcChar8 *file)
-{
-    FcChar8    *path;
-    int         size, osize;
-
-    if (!dir)
-	dir = (FcChar8 *) "";
-
-    osize = strlen ((char *) dir) + 1 + strlen ((char *) file) + 1;
-    /*
-     * workaround valgrind warning because glibc takes advantage of how it knows memory is
-     * allocated to implement strlen by reading in groups of 4
-     */
-    size = (osize + 3) & ~3;
-
-    path = malloc (size);
-    if (!path)
-	return 0;
-
-    strcpy ((char *) path, (const char *) dir);
-    /* make sure there's a single separator */
-#ifdef _WIN32
-    if ((!path[0] || (path[strlen((char *) path)-1] != '/' &&
-		      path[strlen((char *) path)-1] != '\\')) &&
-	!(file[0] == '/' ||
-	  file[0] == '\\' ||
-	  (isalpha (file[0]) && file[1] == ':' && (file[2] == '/' || file[2] == '\\'))))
-	strcat ((char *) path, "\\");
-#else
-    if ((!path[0] || path[strlen((char *) path)-1] != '/') && file[0] != '/')
-	strcat ((char *) path, "/");
-    else
-	osize--;
-#endif
-    strcat ((char *) path, (char *) file);
-
-    if (access ((char *) path, R_OK) == 0)
-	return path;
-
-    FcStrFree (path);
-
-    return 0;
-}
-
-static FcChar8 **
-FcConfigGetPath (void)
-{
-    FcChar8    **path;
-    FcChar8    *env, *e, *colon;
-    FcChar8    *dir;
-    int	    npath;
-    int	    i;
-
-    npath = 2;	/* default dir + null */
-    env = (FcChar8 *) getenv ("FONTCONFIG_PATH");
-    if (env)
-    {
-	e = env;
-	npath++;
-	while (*e)
-	    if (*e++ == FC_SEARCH_PATH_SEPARATOR)
-		npath++;
-    }
-    path = calloc (npath, sizeof (FcChar8 *));
-    if (!path)
-	goto bail0;
-    i = 0;
-
-    if (env)
-    {
-	e = env;
-	while (*e)
-	{
-	    colon = (FcChar8 *) strchr ((char *) e, FC_SEARCH_PATH_SEPARATOR);
-	    if (!colon)
-		colon = e + strlen ((char *) e);
-	    path[i] = malloc (colon - e + 1);
-	    if (!path[i])
-		goto bail1;
-	    strncpy ((char *) path[i], (const char *) e, colon - e);
-	    path[i][colon - e] = '\0';
-	    if (*colon)
-		e = colon + 1;
-	    else
-		e = colon;
-	    i++;
-	}
-    }
-
-#ifdef _WIN32
-	if (fontconfig_path[0] == '\0')
-	{
-		char *p;
-		if(!GetModuleFileName(NULL, (LPCH) fontconfig_path, sizeof(fontconfig_path)))
-			goto bail1;
-		p = strrchr ((const char *) fontconfig_path, '\\');
-		if (p) *p = '\0';
-		strcat ((char *) fontconfig_path, "\\fonts");
-	}
-#endif
-    dir = (FcChar8 *) FONTCONFIG_PATH;
-    path[i] = malloc (strlen ((char *) dir) + 1);
-    if (!path[i])
-	goto bail1;
-    strcpy ((char *) path[i], (const char *) dir);
-    return path;
-
-bail1:
-    for (i = 0; path[i]; i++)
-	free (path[i]);
-    free (path);
-bail0:
-    return 0;
-}
-
-static void
-FcConfigFreePath (FcChar8 **path)
-{
-    FcChar8    **p;
-
-    for (p = path; *p; p++)
-	free (*p);
-    free (path);
-}
-
-static FcBool	_FcConfigHomeEnabled = FcTrue; /* MT-goodenough */
-
-FcChar8 *
-FcConfigHome (void)
-{
-    if (_FcConfigHomeEnabled)
-    {
-        char *home = getenv ("HOME");
-
-#ifdef _WIN32
-	if (home == NULL)
-	    home = getenv ("USERPROFILE");
-#endif
-
-	return (FcChar8 *) home;
-    }
-    return 0;
-}
-
-FcChar8 *
-FcConfigXdgCacheHome (void)
-{
-    const char *env = getenv ("XDG_CACHE_HOME");
-    FcChar8 *ret = NULL;
-
-    if (!_FcConfigHomeEnabled)
-	return NULL;
-    if (env)
-	ret = FcStrCopy ((const FcChar8 *)env);
-    else
-    {
-	const FcChar8 *home = FcConfigHome ();
-	size_t len = home ? strlen ((const char *)home) : 0;
-
-	ret = malloc (len + 7 + 1);
-	if (ret)
-	{
-	    if (home)
-		memcpy (ret, home, len);
-	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".cache", 7);
-	    ret[len + 7] = 0;
-	}
-    }
-
-    return ret;
-}
-
-FcChar8 *
-FcConfigXdgConfigHome (void)
-{
-    const char *env = getenv ("XDG_CONFIG_HOME");
-    FcChar8 *ret = NULL;
-
-    if (!_FcConfigHomeEnabled)
-	return NULL;
-    if (env)
-	ret = FcStrCopy ((const FcChar8 *)env);
-    else
-    {
-	const FcChar8 *home = FcConfigHome ();
-	size_t len = home ? strlen ((const char *)home) : 0;
-
-	ret = malloc (len + 8 + 1);
-	if (ret)
-	{
-	    if (home)
-		memcpy (ret, home, len);
-	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".config", 8);
-	    ret[len + 8] = 0;
-	}
-    }
-
-    return ret;
-}
-
-FcChar8 *
-FcConfigXdgDataHome (void)
-{
-    const char *env = getenv ("XDG_DATA_HOME");
-    FcChar8 *ret = NULL;
-
-    if (!_FcConfigHomeEnabled)
-	return NULL;
-    if (env)
-	ret = FcStrCopy ((const FcChar8 *)env);
-    else
-    {
-	const FcChar8 *home = FcConfigHome ();
-	size_t len = home ? strlen ((const char *)home) : 0;
-
-	ret = malloc (len + 13 + 1);
-	if (ret)
-	{
-	    if (home)
-		memcpy (ret, home, len);
-	    memcpy (&ret[len], FC_DIR_SEPARATOR_S ".local" FC_DIR_SEPARATOR_S "share", 13);
-	    ret[len + 13] = 0;
-	}
-    }
-
-    return ret;
-}
-
-FcBool
-FcConfigEnableHome (FcBool enable)
-{
-    FcBool  prev = _FcConfigHomeEnabled;
-    _FcConfigHomeEnabled = enable;
-    return prev;
-}
-
-FcChar8 *
-FcConfigGetFilename (FcConfig      *config,
-		     const FcChar8 *url)
-{
-    FcChar8    *file, *dir, **path, **p;
-    const FcChar8 *sysroot;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return NULL;
-    sysroot = FcConfigGetSysRoot (config);
-    if (!url || !*url)
-    {
-	url = (FcChar8 *) getenv ("FONTCONFIG_FILE");
-	if (!url)
-	    url = (FcChar8 *) FONTCONFIG_FILE;
-    }
-    file = 0;
-
-    if (FcStrIsAbsoluteFilename(url))
-    {
-	file = FcConfigFileExists (sysroot, url);
-	goto bail;
-    }
-
-    if (*url == '~')
-    {
-	dir = FcConfigHome ();
-	if (dir)
-	{
-	    FcChar8 *s;
-
-	    if (sysroot)
-		s = FcStrBuildFilename (sysroot, dir, NULL);
-	    else
-		s = dir;
-	    file = FcConfigFileExists (s, url + 1);
-	    if (sysroot)
-		FcStrFree (s);
-	}
-	else
-	    file = 0;
-    }
-    else
-    {
-	path = FcConfigGetPath ();
-	if (!path)
-	{
-	    file = NULL;
-	    goto bail;
-	}
-	for (p = path; *p; p++)
-	{
-	    FcChar8 *s;
-
-	    if (sysroot)
-		s = FcStrBuildFilename (sysroot, *p, NULL);
-	    else
-		s = *p;
-	    file = FcConfigFileExists (s, url);
-	    if (sysroot)
-		FcStrFree (s);
-	    if (file)
-		break;
-	}
-	FcConfigFreePath (path);
-    }
-bail:
-    FcConfigDestroy (config);
-
-    return file;
-}
-
-FcChar8 *
-FcConfigFilename (const FcChar8 *url)
-{
-    return FcConfigGetFilename (NULL, url);
-}
-
-FcChar8 *
-FcConfigRealFilename (FcConfig		*config,
-		      const FcChar8	*url)
-{
-    FcChar8 *n = FcConfigGetFilename (config, url);
-
-    if (n)
-    {
-	FcChar8 buf[FC_PATH_MAX];
-	ssize_t len;
-
-	if ((len = FcReadLink (n, buf, sizeof (buf) - 1)) != -1)
-	{
-	    buf[len] = 0;
-
-	    if (!FcStrIsAbsoluteFilename (buf))
-	    {
-		FcChar8 *dirname = FcStrDirname (n);
-		FcStrFree (n);
-		if (!dirname)
-		    return NULL;
-
-		FcChar8 *path = FcStrBuildFilename (dirname, buf, NULL);
-		FcStrFree (dirname);
-		if (!path)
-		    return NULL;
-
-		n = FcStrCanonFilename (path);
-		FcStrFree (path);
-	    }
-	    else
-	    {
-		FcStrFree (n);
-		n = FcStrdup (buf);
-	    }
-	}
-    }
-
-    return n;
-}
-
-/*
- * Manage the application-specific fonts
- */
-
-FcBool
-FcConfigAppFontAddFile (FcConfig    *config,
-			const FcChar8  *file)
-{
-    FcFontSet	*set;
-    FcStrSet	*subdirs;
-    FcStrList	*sublist;
-    FcChar8	*subdir;
-    FcBool	ret = FcTrue;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return FcFalse;
-
-    subdirs = FcStrSetCreateEx (FCSS_GROW_BY_64);
-    if (!subdirs)
-    {
-	ret = FcFalse;
-	goto bail;
-    }
-
-    set = FcConfigGetFonts (config, FcSetApplication);
-    if (!set)
-    {
-	set = FcFontSetCreate ();
-	if (!set)
-	{
-	    FcStrSetDestroy (subdirs);
-	    ret = FcFalse;
-	    goto bail;
-	}
-	FcConfigSetFonts (config, set, FcSetApplication);
-    }
-	
-    if (!FcFileScanConfig (set, subdirs, file, config))
-    {
-	FcStrSetDestroy (subdirs);
-	ret = FcFalse;
-	goto bail;
-    }
-    if ((sublist = FcStrListCreate (subdirs)))
-    {
-	while ((subdir = FcStrListNext (sublist)))
-	{
-	    FcConfigAppFontAddDir (config, subdir);
-	}
-	FcStrListDone (sublist);
-    }
-    FcStrSetDestroy (subdirs);
-bail:
-    FcConfigDestroy (config);
-
-    return ret;
-}
-
-FcBool
-FcConfigAppFontAddDir (FcConfig	    *config,
-		       const FcChar8   *dir)
-{
-    FcFontSet	*set;
-    FcStrSet	*dirs;
-    FcBool	ret = FcTrue;
-
-    config = FcConfigReference (config);
-    if (!config)
-	return FcFalse;
-
-    dirs = FcStrSetCreateEx (FCSS_GROW_BY_64);
-    if (!dirs)
-    {
-	ret = FcFalse;
-	goto bail;
-    }
-
-    set = FcConfigGetFonts (config, FcSetApplication);
-    if (!set)
-    {
-	set = FcFontSetCreate ();
-	if (!set)
-	{
-	    FcStrSetDestroy (dirs);
-	    ret = FcFalse;
-	    goto bail;
-	}
-	FcConfigSetFonts (config, set, FcSetApplication);
-    }
-
-    FcStrSetAddFilename (dirs, dir);
-
-    if (!FcConfigAddDirList (config, FcSetApplication, dirs))
-    {
-	FcStrSetDestroy (dirs);
-	ret = FcFalse;
-	goto bail;
-    }
-    FcStrSetDestroy (dirs);
-bail:
-    FcConfigDestroy (config);
-
-    return ret;
-}
-
 void
 FcConfigAppFontClear (FcConfig	    *config)
 {
@@ -2693,98 +1913,10 @@ const FcChar8 *
 FcConfigGetSysRoot (const FcConfig *config)
 {
     if (!config)
-    {
-	config = FcConfigGetCurrent ();
-	if (!config)
-	    return NULL;
-    }
+        return NULL;
     return config->sysRoot;
 }
 
-void
-FcConfigSetSysRoot (FcConfig      *config,
-		    const FcChar8 *sysroot)
-{
-    FcChar8 *s = NULL;
-    FcBool init = FcFalse;
-    int nretry = 3;
-
-retry:
-    if (!config)
-    {
-	/* We can't use FcConfigGetCurrent() here to ensure
-	 * the sysroot is set prior to initialize FcConfig,
-	 * to avoid loading caches from non-sysroot dirs.
-	 * So postpone the initialization later.
-	 */
-	config = fc_atomic_ptr_get (&_fcConfig);
-	if (!config)
-	{
-	    config = FcConfigCreate ();
-	    if (!config)
-		return;
-	    init = FcTrue;
-	}
-    }
-
-    if (sysroot)
-    {
-	s = FcConfigRealPath(sysroot);
-	if (!s)
-	    return;
-    }
-
-    if (config->sysRoot)
-	FcStrFree (config->sysRoot);
-
-    config->sysRoot = s;
-    if (init)
-    {
-	config = FcInitLoadOwnConfigAndFonts (config);
-	if (!config)
-	{
-	    /* Something failed. this is usually unlikely. so retrying */
-	    init = FcFalse;
-	    if (--nretry == 0)
-	    {
-		fprintf (stderr, "Fontconfig warning: Unable to initialize config and retry limit exceeded. sysroot functionality may not work as expected.\n");
-		return;
-	    }
-	    goto retry;
-	}
-	FcConfigSetCurrent (config);
-	/* FcConfigSetCurrent() increases the refcount.
-	 * decrease it here to avoid the memory leak.
-	 */
-	FcConfigDestroy (config);
-    }
-}
-
-FcRuleSet *
-FcRuleSetCreate (const FcChar8 *name)
-{
-    FcRuleSet *ret = (FcRuleSet *) malloc (sizeof (FcRuleSet));
-    FcMatchKind k;
-    const FcChar8 *p;
-
-    if (!name)
-	p = (const FcChar8 *)"";
-    else
-	p = name;
-
-    if (ret)
-    {
-	ret->name = FcStrdup (p);
-	ret->description = NULL;
-	ret->domain = NULL;
-	for (k = FcMatchKindBegin; k < FcMatchKindEnd; k++)
-	    ret->subst[k] = FcPtrListCreate (FcDestroyAsRule);
-	FcRefInit (&ret->ref, 1);
-    }
-
-    return ret;
-}
-
 void
 FcRuleSetDestroy (FcRuleSet *rs)
 {
@@ -2881,79 +2013,15 @@ FcRuleSetAdd (FcRuleSet		*rs,
     }
     if (FcDebug () & FC_DBG_EDIT)
     {
+#ifdef WASI_RUNTIME
 	printf ("Add Rule(kind:%d, name: %s) ", kind, rs->name);
 	FcRulePrint (rule);
+#endif
     }
     ret = FC_OBJ_ID (n) - FC_MAX_BASE_OBJECT;
 
     return ret < 0 ? 0 : ret;
 }
 
-void
-FcConfigFileInfoIterInit (FcConfig		*config,
-			  FcConfigFileInfoIter	*iter)
-{
-    FcConfig *c;
-    FcPtrListIter *i = (FcPtrListIter *)iter;
-
-    if (!config)
-	c = FcConfigGetCurrent ();
-    else
-	c = config;
-    FcPtrListIterInit (c->rulesetList, i);
-}
-
-FcBool
-FcConfigFileInfoIterNext (FcConfig		*config,
-			  FcConfigFileInfoIter	*iter)
-{
-    FcConfig *c;
-    FcPtrListIter *i = (FcPtrListIter *)iter;
-
-    if (!config)
-	c = FcConfigGetCurrent ();
-    else
-	c = config;
-    if (FcPtrListIterIsValid (c->rulesetList, i))
-    {
-	FcPtrListIterNext (c->rulesetList, i);
-    }
-    else
-	return FcFalse;
-
-    return FcTrue;
-}
-
-FcBool
-FcConfigFileInfoIterGet (FcConfig		*config,
-			 FcConfigFileInfoIter	*iter,
-			 FcChar8		**name,
-			 FcChar8		**description,
-			 FcBool			*enabled)
-{
-    FcConfig *c;
-    FcRuleSet *r;
-    FcPtrListIter *i = (FcPtrListIter *)iter;
-
-    if (!config)
-	c = FcConfigGetCurrent ();
-    else
-	c = config;
-    if (!FcPtrListIterIsValid (c->rulesetList, i))
-	return FcFalse;
-    r = FcPtrListIterGetValue (c->rulesetList, i);
-    if (name)
-	*name = FcStrdup (r->name && r->name[0] ? r->name : (const FcChar8 *) "fonts.conf");
-    if (description)
-	*description = FcStrdup (!r->description ? _("No description") :
-				 dgettext (r->domain ? (const char *) r->domain : GETTEXT_PACKAGE "-conf",
-					   (const char *) r->description));
-    if (enabled)
-	*enabled = r->enabled;
-
-    return FcTrue;
-}
-
 #define __fccfg__
-#include "fcaliastail.h"
 #undef __fccfg__
diff --git a/src/fccharset.c b/src/fccharset.c
index 114f948..7dc1dce 100644
--- a/src/fccharset.c
+++ b/src/fccharset.c
@@ -70,11 +70,6 @@ FcCharSetDestroy (FcCharSet *fcs)
 
     if (fcs)
     {
-	if (FcRefIsConst (&fcs->ref))
-	{
-	    FcCacheObjectDereference (fcs);
-	    return;
-	}
 	if (FcRefDec (&fcs->ref) != 1)
 	    return;
 	for (i = 0; i < fcs->num; i++)
@@ -359,12 +354,7 @@ FcCharSet *
 FcCharSetCopy (FcCharSet *src)
 {
     if (src)
-    {
-	if (!FcRefIsConst (&src->ref))
-	    FcRefInc (&src->ref);
-	else
-	    FcCacheObjectReference (src);
-    }
+	FcRefInc (&src->ref);
     return src;
 }
 
@@ -519,12 +509,6 @@ FcCharSetMerge (FcCharSet *a, const FcCharSet *b, FcBool *changed)
     if (!a || !b)
 	return FcFalse;
 
-    if (FcRefIsConst (&a->ref)) {
-	if (changed)
-	    *changed = FcFalse;
-	return FcFalse;
-    }
-
     if (changed) {
 	*changed = !FcCharSetIsSubset(b, a);
 	if (!*changed)
@@ -966,12 +950,16 @@ FcNameUnparseCharSet (FcStrBuf *buf, const FcCharSet *c)
 	{
 	    if (ci.ucs4 < checki.ucs4)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Missing leaf node at 0x%x\n", ci.ucs4);
+#endif
 		FcCharSetIterNext (c, &ci);
 	    }
 	    else if (checki.ucs4 < ci.ucs4)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Extra leaf node at 0x%x\n", checki.ucs4);
+#endif
 		FcCharSetIterNext (check, &checki);
 	    }
 	    else
@@ -982,8 +970,10 @@ FcNameUnparseCharSet (FcStrBuf *buf, const FcCharSet *c)
 
 		for (i = 0; i < 256; i += 32)
 		{
+#ifdef WASI_RUNTIME
 		    if (*cm != *checkm)
 			printf ("Mismatching sets at 0x%08x: 0x%08x != 0x%08x\n",
+#endif
 				ci.ucs4 + i, *cm, *checkm);
 		    cm++;
 		    checkm++;
@@ -992,10 +982,14 @@ FcNameUnparseCharSet (FcStrBuf *buf, const FcCharSet *c)
 		FcCharSetIterNext (check, &checki);
 	    }
 	}
+#ifdef WASI_RUNTIME
 	if ((missing = FcCharSetSubtractCount (c, check)))
 	    printf ("%d missing in reparsed result\n", missing);
+#endif
+#ifdef WASI_RUNTIME
 	if ((missing = FcCharSetSubtractCount (check, c)))
 	    printf ("%d extra in reparsed result\n", missing);
+#endif
 	FcCharSetDestroy (check);
     }
 #endif
@@ -1201,18 +1195,6 @@ FcCharSetFreezeBase (FcCharSetFreezer *freezer, FcCharSet *fcs)
     return &ent->set;
 }
 
-static const FcCharSet *
-FcCharSetFindFrozen (FcCharSetFreezer *freezer, const FcCharSet *orig)
-{
-    FcCharSetOrigEnt    **bucket = &freezer->orig_hash_table[((uintptr_t) orig) % FC_CHAR_SET_HASH_SIZE];
-    FcCharSetOrigEnt	*ent;
-
-    for (ent = *bucket; ent; ent = ent->next)
-	if (ent->orig == orig)
-	    return ent->frozen;
-    return NULL;
-}
-
 const FcCharSet *
 FcCharSetFreeze (FcCharSetFreezer *freezer, const FcCharSet *fcs)
 {
@@ -1266,9 +1248,11 @@ FcCharSetFreezerDestroy (FcCharSetFreezer *freezer)
 
     if (FcDebug() & FC_DBG_CACHE)
     {
+#ifdef WASI_RUNTIME
 	printf ("\ncharsets %d -> %d leaves %d -> %d\n",
 		freezer->charsets_seen, freezer->charsets_allocated,
 		freezer->leaves_seen, freezer->leaves_allocated);
+#endif
     }
     for (i = 0; i < FC_CHAR_SET_HASH_SIZE; i++)
     {
@@ -1297,104 +1281,5 @@ FcCharSetFreezerDestroy (FcCharSetFreezer *freezer)
     free (freezer);
 }
 
-FcBool
-FcCharSetSerializeAlloc (FcSerialize *serialize, const FcCharSet *cs)
-{
-    intptr_t	    *leaves;
-    FcChar16	    *numbers;
-    int		    i;
-
-    if (!FcRefIsConst (&cs->ref))
-    {
-	if (!serialize->cs_freezer)
-	{
-	    serialize->cs_freezer = FcCharSetFreezerCreate ();
-	    if (!serialize->cs_freezer)
-		return FcFalse;
-	}
-	if (FcCharSetFindFrozen (serialize->cs_freezer, cs))
-	    return FcTrue;
-
-        cs = FcCharSetFreeze (serialize->cs_freezer, cs);
-    }
-
-    leaves = FcCharSetLeaves (cs);
-    numbers = FcCharSetNumbers (cs);
-
-    if (!FcSerializeAlloc (serialize, cs, sizeof (FcCharSet)))
-	return FcFalse;
-    if (!FcSerializeAlloc (serialize, leaves, cs->num * sizeof (intptr_t)))
-	return FcFalse;
-    if (!FcSerializeAlloc (serialize, numbers, cs->num * sizeof (FcChar16)))
-	return FcFalse;
-    for (i = 0; i < cs->num; i++)
-	if (!FcSerializeAlloc (serialize, FcCharSetLeaf(cs, i),
-			       sizeof (FcCharLeaf)))
-	    return FcFalse;
-    return FcTrue;
-}
-
-FcCharSet *
-FcCharSetSerialize(FcSerialize *serialize, const FcCharSet *cs)
-{
-    FcCharSet	*cs_serialized;
-    intptr_t	*leaves, *leaves_serialized;
-    FcChar16	*numbers, *numbers_serialized;
-    FcCharLeaf	*leaf, *leaf_serialized;
-    int		i;
-
-    if (!FcRefIsConst (&cs->ref) && serialize->cs_freezer)
-    {
-	cs = FcCharSetFindFrozen (serialize->cs_freezer, cs);
-	if (!cs)
-	    return NULL;
-    }
-		
-    cs_serialized = FcSerializePtr (serialize, cs);
-    if (!cs_serialized)
-	return NULL;
-
-    FcRefSetConst (&cs_serialized->ref);
-    cs_serialized->num = cs->num;
-
-    if (cs->num)
-    {
-	leaves = FcCharSetLeaves (cs);
-	leaves_serialized = FcSerializePtr (serialize, leaves);
-	if (!leaves_serialized)
-	    return NULL;
-
-	cs_serialized->leaves_offset = FcPtrToOffset (cs_serialized,
-						      leaves_serialized);
-	
-	numbers = FcCharSetNumbers (cs);
-	numbers_serialized = FcSerializePtr (serialize, numbers);
-	if (!numbers)
-	    return NULL;
-
-	cs_serialized->numbers_offset = FcPtrToOffset (cs_serialized,
-						       numbers_serialized);
-
-	for (i = 0; i < cs->num; i++)
-	{
-	    leaf = FcCharSetLeaf (cs, i);
-	    leaf_serialized = FcSerializePtr (serialize, leaf);
-	    if (!leaf_serialized)
-		return NULL;
-	    *leaf_serialized = *leaf;
-	    leaves_serialized[i] = FcPtrToOffset (leaves_serialized,
-						  leaf_serialized);
-	    numbers_serialized[i] = numbers[i];
-	}
-    }
-    else
-    {
-	cs_serialized->leaves_offset = 0;
-	cs_serialized->numbers_offset = 0;
-    }
-
-    return cs_serialized;
-}
 #define __fccharset__
-#include "fcaliastail.h"
 #undef __fccharset__
diff --git a/src/fcdbg.c b/src/fcdbg.c
index e2c6b56..584e28f 100644
--- a/src/fcdbg.c
+++ b/src/fcdbg.c
@@ -26,6 +26,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 
+#ifdef WASI_RUNTIME
 static void
 _FcValuePrintFile (FILE *f, const FcValue v)
 {
@@ -61,42 +62,47 @@ _FcValuePrintFile (FILE *f, const FcValue v)
     case FcTypeLangSet:
 	FcLangSetPrint (v.u.l);
 	break;
-    case FcTypeFTFace:
-	fprintf (f, "face");
-	break;
     case FcTypeRange:
 	fprintf (f, "[%g %g]", v.u.r->begin, v.u.r->end);
 	break;
     }
 }
+#endif
 
 void
 FcValuePrintFile (FILE *f, const FcValue v)
 {
+#ifdef WASI_RUNTIME
     fprintf (f, " ");
     _FcValuePrintFile (f, v);
+#endif
 }
 
 void
 FcValuePrint (const FcValue v)
 {
+#ifdef WASI_RUNTIME
     printf (" ");
     _FcValuePrintFile (stdout, v);
+#endif
 }
 
 void
 FcValuePrintWithPosition (const FcValue v, FcBool show_pos_mark)
 {
+#ifdef WASI_RUNTIME
     if (show_pos_mark)
 	printf (" [marker] ");
     else
 	printf (" ");
     _FcValuePrintFile (stdout, v);
+#endif
 }
 
 static void
 FcValueBindingPrint (const FcValueListPtr l)
 {
+#ifdef WASI_RUNTIME
     switch (l->binding) {
     case FcValueBindingWeak:
 	printf ("(w)");
@@ -112,11 +118,13 @@ FcValueBindingPrint (const FcValueListPtr l)
 	printf ("(?)");
 	break;
     }
+#endif
 }
 
 void
 FcValueListPrintWithPosition (FcValueListPtr l, const FcValueListPtr pos)
 {
+#ifdef WASI_RUNTIME
     for (; l != NULL; l = FcValueListNext(l))
     {
 	FcValuePrintWithPosition (FcValueCanonicalize (&l->value), pos != NULL && l == pos);
@@ -124,21 +132,25 @@ FcValueListPrintWithPosition (FcValueListPtr l, const FcValueListPtr pos)
     }
     if (!pos)
 	printf (" [marker]");
+#endif
 }
 
 void
 FcValueListPrint (FcValueListPtr l)
 {
+#ifdef WASI_RUNTIME
     for (; l != NULL; l = FcValueListNext(l))
     {
 	FcValuePrint (FcValueCanonicalize (&l->value));
 	FcValueBindingPrint (l);
     }
+#endif
 }
 
 void
 FcLangSetPrint (const FcLangSet *ls)
 {
+#ifdef WASI_RUNTIME
     FcStrBuf	buf;
     FcChar8	init_buf[1024];
 
@@ -148,11 +160,13 @@ FcLangSetPrint (const FcLangSet *ls)
     else
        printf ("langset (alloc error)");
     FcStrBufDestroy (&buf);
+#endif
 }
 
 void
 FcCharSetPrint (const FcCharSet *c)
 {
+#ifdef WASI_RUNTIME
     int	i, j;
     intptr_t	*leaves = FcCharSetLeaves (c);
     FcChar16	*numbers = FcCharSetNumbers (c);
@@ -182,11 +196,13 @@ FcCharSetPrint (const FcCharSet *c)
 	    printf (" %08x", leaf->map[j]);
 	printf ("\n");
     }
+#endif
 }
 
 void
 FcPatternPrint (const FcPattern *p)
 {
+#ifdef WASI_RUNTIME
     FcPatternIter iter;
 
     if (!p)
@@ -203,6 +219,7 @@ FcPatternPrint (const FcPattern *p)
 	printf ("\n");
     } while (FcPatternIterNext (p, &iter));
     printf ("\n");
+#endif
 }
 
 #define FcOpFlagsPrint(_o_)		\
@@ -217,6 +234,7 @@ FcPatternPrint2 (FcPattern         *pp1,
 		 FcPattern         *pp2,
 		 const FcObjectSet *os)
 {
+#ifdef WASI_RUNTIME
     int i, j, k, pos;
     FcPatternElt *e1, *e2;
     FcPattern *p1, *p2;
@@ -288,11 +306,13 @@ FcPatternPrint2 (FcPattern         *pp1,
 	FcPatternDestroy (p1);
     if (p2 != pp2)
 	FcPatternDestroy (p2);
+#endif
 }
 
 void
 FcOpPrint (FcOp op_)
 {
+#ifdef WASI_RUNTIME
     FcOp op = FC_OP_GET_OP (op_);
 
     switch (op) {
@@ -339,11 +359,13 @@ FcOpPrint (FcOp op_)
     case FcOpListing: printf ("Listing"); FcOpFlagsPrint (op_); break;
     case FcOpInvalid: printf ("Invalid"); break;
     }
+#endif
 }
 
 void
 FcExprPrint (const FcExpr *expr)
 {
+#ifdef WASI_RUNTIME
     if (!expr) printf ("none");
     else switch (FC_OP_GET_OP (expr->op)) {
     case FcOpInteger: printf ("%d", expr->u.ival); break;
@@ -463,11 +485,13 @@ FcExprPrint (const FcExpr *expr)
 	break;
     case FcOpInvalid: printf ("Invalid"); break;
     }
+#endif
 }
 
 void
 FcTestPrint (const FcTest *test)
 {
+#ifdef WASI_RUNTIME
     switch (test->kind) {
     case FcMatchPattern:
 	printf ("pattern ");
@@ -501,20 +525,24 @@ FcTestPrint (const FcTest *test)
     printf (" ");
     FcExprPrint (test->expr);
     printf ("\n");
+#endif
 }
 
 void
 FcEditPrint (const FcEdit *edit)
 {
+#ifdef WASI_RUNTIME
     printf ("Edit %s ", FcObjectName (edit->object));
     FcOpPrint (edit->op);
     printf (" ");
     FcExprPrint (edit->expr);
+#endif
 }
 
 void
 FcRulePrint (const FcRule *rule)
 {
+#ifdef WASI_RUNTIME
     FcRuleType last_type = FcRuleUnknown;
     const FcRule *r;
 
@@ -548,11 +576,13 @@ FcRulePrint (const FcRule *rule)
 	}
     }
     printf ("\n");
+#endif
 }
 
 void
 FcFontSetPrint (const FcFontSet *s)
 {
+#ifdef WASI_RUNTIME
     int	    i;
 
     printf ("FontSet %d of %d\n", s->nfont, s->sfont);
@@ -561,6 +591,7 @@ FcFontSetPrint (const FcFontSet *s)
 	printf ("Font %d ", i);
 	FcPatternPrint (s->fonts[i]);
     }
+#endif
 }
 
 int FcDebugVal;
@@ -568,7 +599,7 @@ int FcDebugVal;
 void
 FcInitDebug (void)
 {
-    if (!FcDebugVal) {
+#ifdef WASI_RUNTIME
 	char    *e;
 
 	e = getenv ("FC_DEBUG");
@@ -579,8 +610,7 @@ FcInitDebug (void)
 	    if (FcDebugVal < 0)
 		FcDebugVal = 0;
 	}
-    }
+#endif
 }
 #define __fcdbg__
-#include "fcaliastail.h"
 #undef __fcdbg__
diff --git a/src/fcdefault.c b/src/fcdefault.c
index f3addca..b619140 100644
--- a/src/fcdefault.c
+++ b/src/fcdefault.c
@@ -44,194 +44,63 @@ static const struct {
 
 #define NUM_FC_BOOL_DEFAULTS	(int) (sizeof FcBoolDefaults / sizeof FcBoolDefaults[0])
 
-FcStrSet *default_langs;
+static FcStrSet *default_langs = NULL;
 
 FcStrSet *
 FcGetDefaultLangs (void)
 {
-    FcStrSet *result;
-retry:
-    result = (FcStrSet *) fc_atomic_ptr_get (&default_langs);
-    if (!result)
+    if (!default_langs)
     {
-	char *langs;
-
-	result = FcStrSetCreate ();
-
-	langs = getenv ("FC_LANG");
-	if (!langs || !langs[0])
-	    langs = getenv ("LC_ALL");
-	if (!langs || !langs[0])
-	    langs = getenv ("LC_CTYPE");
-	if (!langs || !langs[0])
-	    langs = getenv ("LANG");
-	if (langs && langs[0])
-	{
-	    if (!FcStrSetAddLangs (result, langs))
-		FcStrSetAdd (result, (const FcChar8 *) "en");
-	}
-	else
-	    FcStrSetAdd (result, (const FcChar8 *) "en");
-
-	FcRefSetConst (&result->ref);
-	if (!fc_atomic_ptr_cmpexch (&default_langs, NULL, result)) {
-	    FcRefInit (&result->ref, 1);
-	    FcStrSetDestroy (result);
-	    goto retry;
-	}
+        default_langs = FcStrSetCreate ();
+	FcStrSetAdd (default_langs, (const FcChar8 *) "en");
+	FcRefSetConst (&default_langs->ref);
     }
 
-    return result;
+    return default_langs;
 }
 
-static FcChar8 *default_lang; /* MT-safe */
+static FcChar8 *default_lang = NULL;
 
 FcChar8 *
 FcGetDefaultLang (void)
 {
-    FcChar8 *lang;
-retry:
-    lang = fc_atomic_ptr_get (&default_lang);
-    if (!lang)
+    if (!default_lang)
     {
 	FcStrSet *langs = FcGetDefaultLangs ();
-	lang = FcStrdup (langs->strs[0]);
-
-	if (!fc_atomic_ptr_cmpexch (&default_lang, NULL, lang)) {
-	    free (lang);
-	    goto retry;
-	}
+	default_lang = FcStrdup (langs->strs[0]);
     }
 
-    return lang;
+    return default_lang;
 }
 
-static FcChar8 *default_prgname;
+static FcChar8 *default_prgname = NULL;
 
 FcChar8 *
 FcGetPrgname (void)
 {
-    FcChar8 *prgname;
-retry:
-    prgname = fc_atomic_ptr_get (&default_prgname);
-    if (!prgname)
-    {
-#ifdef _WIN32
-	char buf[MAX_PATH+1];
-
-	/* TODO This is ASCII-only; fix it. */
-	if (GetModuleFileNameA (GetModuleHandle (NULL), buf, sizeof (buf) / sizeof (buf[0])) > 0)
-	{
-	    char *p;
-	    unsigned int len;
-
-	    p = strrchr (buf, '\\');
-	    if (p)
-		p++;
-	    else
-		p = buf;
-
-	    len = strlen (p);
-
-	    if (len > 4 && 0 == strcmp (p + len - 4, ".exe"))
-	    {
-		len -= 4;
-		buf[len] = '\0';
-	    }
-
-	    prgname = FcStrdup (p);
-	}
-#elif defined (HAVE_GETPROGNAME)
-	const char *q = getprogname ();
-	if (q)
-	    prgname = FcStrdup (q);
-	else
-	    prgname = FcStrdup ("");
-#else
-# if defined (HAVE_GETEXECNAME)
-	char *p = FcStrdup(getexecname ());
-# elif defined (HAVE_READLINK)
-	size_t size = FC_PATH_MAX;
-	char *p = NULL;
+  if (!default_prgname)
+      default_prgname = FcStrdup("wasm");
 
-	while (1)
-	{
-	    char *buf = malloc (size);
-	    ssize_t len;
-
-	    if (!buf)
-		break;
-
-	    len = readlink ("/proc/self/exe", buf, size - 1);
-	    if (len < 0)
-	    {
-		free (buf);
-		break;
-	    }
-	    if (len < size - 1)
-	    {
-		buf[len] = 0;
-		p = buf;
-		break;
-	    }
-
-	    free (buf);
-	    size *= 2;
-	}
-# else
-	char *p = NULL;
-# endif
-	if (p)
-	{
-	    char *r = strrchr (p, '/');
-	    if (r)
-		r++;
-	    else
-		r = p;
-
-	    prgname = FcStrdup (r);
-	}
-
-	if (!prgname)
-	    prgname = FcStrdup ("");
-
-	if (p)
-	    free (p);
-#endif
-
-	if (!fc_atomic_ptr_cmpexch (&default_prgname, NULL, prgname)) {
-	    free (prgname);
-	    goto retry;
-	}
-    }
-
-    if (prgname && !prgname[0])
-	return NULL;
-
-    return prgname;
+  return default_prgname;
 }
 
 void
 FcDefaultFini (void)
 {
-    FcChar8  *lang;
-    FcStrSet *langs;
-    FcChar8  *prgname;
-
-    lang = fc_atomic_ptr_get (&default_lang);
-    if (lang && fc_atomic_ptr_cmpexch (&default_lang, lang, NULL)) {
-	free (lang);
+    if (default_lang) {
+        free (default_lang);
+        default_lang = NULL;
     }
 
-    langs = fc_atomic_ptr_get (&default_langs);
-    if (langs && fc_atomic_ptr_cmpexch (&default_langs, langs, NULL)) {
-	FcRefInit (&langs->ref, 1);
-	FcStrSetDestroy (langs);
+    if (default_langs) {
+	FcRefInit (&default_langs->ref, 1);
+	FcStrSetDestroy (default_langs);
+        default_langs = NULL;
     }
 
-    prgname = fc_atomic_ptr_get (&default_prgname);
-    if (prgname && fc_atomic_ptr_cmpexch (&default_prgname, prgname, NULL)) {
-	free (prgname);
+    if (default_prgname) {
+        free(default_prgname);
+        default_prgname = NULL;
     }
 }
 
@@ -337,5 +206,4 @@ FcDefaultSubstitute (FcPattern *pattern)
     }
 }
 #define __fcdefault__
-#include "fcaliastail.h"
 #undef __fcdefault__
diff --git a/src/fcfs.c b/src/fcfs.c
index 21c6c7c..c845718 100644
--- a/src/fcfs.c
+++ b/src/fcfs.c
@@ -73,77 +73,5 @@ FcFontSetAdd (FcFontSet *s, FcPattern *font)
     return FcTrue;
 }
 
-FcBool
-FcFontSetSerializeAlloc (FcSerialize *serialize, const FcFontSet *s)
-{
-    int i;
-
-    if (!FcSerializeAlloc (serialize, s, sizeof (FcFontSet)))
-	return FcFalse;
-    if (!FcSerializeAlloc (serialize, s->fonts, s->nfont * sizeof (FcPattern *)))
-	return FcFalse;
-    for (i = 0; i < s->nfont; i++)
-    {
-	if (!FcPatternSerializeAlloc (serialize, s->fonts[i]))
-	    return FcFalse;
-    }
-    return FcTrue;
-}
-
-FcFontSet *
-FcFontSetSerialize (FcSerialize *serialize, const FcFontSet * s)
-{
-    int		i;
-    FcFontSet	*s_serialize;
-    FcPattern	**fonts_serialize;
-    FcPattern	*p_serialize;
-
-    s_serialize = FcSerializePtr (serialize, s);
-    if (!s_serialize)
-	return NULL;
-    *s_serialize = *s;
-    s_serialize->sfont = s_serialize->nfont;
-
-    fonts_serialize = FcSerializePtr (serialize, s->fonts);
-    if (!fonts_serialize)
-	return NULL;
-    s_serialize->fonts = FcPtrToEncodedOffset (s_serialize,
-					       fonts_serialize, FcPattern *);
-
-    for (i = 0; i < s->nfont; i++)
-    {
-	p_serialize = FcPatternSerialize (serialize, s->fonts[i]);
-	if (!p_serialize)
-	    return NULL;
-	fonts_serialize[i] = FcPtrToEncodedOffset (s_serialize,
-						   p_serialize,
-						   FcPattern);
-    }
-
-    return s_serialize;
-}
-
-FcFontSet *
-FcFontSetDeserialize (const FcFontSet *set)
-{
-    int i;
-    FcFontSet *new = FcFontSetCreate ();
-
-    if (!new)
-	return NULL;
-    for (i = 0; i < set->nfont; i++)
-    {
-	if (!FcFontSetAdd (new, FcPatternDuplicate (FcFontSetFont (set, i))))
-	    goto bail;
-    }
-
-    return new;
-bail:
-    FcFontSetDestroy (new);
-
-    return NULL;
-}
-
 #define __fcfs__
-#include "fcaliastail.h"
 #undef __fcfs__
diff --git a/src/fcint.h b/src/fcint.h
index 9e1da1e..c310f58 100644
--- a/src/fcint.h
+++ b/src/fcint.h
@@ -106,7 +106,6 @@ extern pfnSHGetFolderPathA pSHGetFolderPathA;
 #if (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 3)) && defined(__ELF__) && !defined(__sun)
 #define FcPrivate		__attribute__((__visibility__("hidden")))
 #define HAVE_GNUC_ATTRIBUTE 1
-#include "fcalias.h"
 #elif defined(__SUNPRO_C) && (__SUNPRO_C >= 0x550)
 #define FcPrivate		__hidden
 #else /* not gcc >= 3.3 and not Sun Studio >= 8 */
diff --git a/src/fclang.c b/src/fclang.c
index 687e2a7..0e5aa73 100644
--- a/src/fclang.c
+++ b/src/fclang.c
@@ -23,7 +23,6 @@
  */
 
 #include "fcint.h"
-#include "fcftint.h"
 
 /* Objects MT-safe for readonly access. */
 
@@ -90,6 +89,36 @@ FcLangSetBitReset (FcLangSet    *ls,
   ls->map[bucket] &= ~((FcChar32) 1U << (id & 0x1f));
 }
 
+/*
+ * Keep Han languages separated by eliminating languages
+ * that the codePageRange bits says aren't supported
+ */
+
+static const struct {
+    char    	    bit;
+    const FcChar8   lang[6];
+} FcCodePageRange[] = {
+    { 17,	"ja" },
+    { 18,	"zh-cn" },
+    { 19,	"ko" },
+    { 20,	"zh-tw" },
+};
+
+#define NUM_CODE_PAGE_RANGE (int) (sizeof FcCodePageRange / sizeof FcCodePageRange[0])
+
+static FcBool
+FcFreeTypeIsExclusiveLang (const FcChar8  *lang)
+{
+    int	    i;
+
+    for (i = 0; i < NUM_CODE_PAGE_RANGE; i++)
+    {
+	if (FcLangCompare (lang, FcCodePageRange[i].lang) == FcLangEqual)
+	    return FcTrue;
+    }
+    return FcFalse;
+}
+
 FcLangSet *
 FcFreeTypeLangSet (const FcCharSet  *charset,
 		   const FcChar8    *exclusiveLang)
@@ -104,20 +133,24 @@ FcFreeTypeLangSet (const FcCharSet  *charset,
     ls = FcLangSetCreate ();
     if (!ls)
 	return 0;
+#ifdef WASI_RUNTIME
     if (FcDebug() & FC_DBG_LANGSET)
     {
 	printf ("font charset");
 	FcCharSetPrint (charset);
 	printf ("\n");
     }
+#endif
     for (i = 0; i < NUM_LANG_CHAR_SET; i++)
     {
+#ifdef WASI_RUNTIME
 	if (FcDebug() & FC_DBG_LANGSET)
 	{
 	    printf ("%s charset", fcLangCharSets[i].lang);
 	    FcCharSetPrint (&fcLangCharSets[i].charset);
 	    printf ("\n");
 	}
+#endif
 	
 	/*
 	 * Check for Han charsets to make fonts
@@ -136,6 +169,7 @@ FcFreeTypeLangSet (const FcCharSet  *charset,
 		    continue;
 	}
 	missing = FcCharSetSubtractCount (&fcLangCharSets[i].charset, charset);
+#ifdef WASI_RUNTIME
         if (FcDebug() & FC_DBG_SCANV)
 	{
 	    if (missing && missing < 10)
@@ -169,10 +203,13 @@ FcFreeTypeLangSet (const FcCharSet  *charset,
 	}
 	if (!missing)
 	    FcLangSetBitSet (ls, i);
+#endif
     }
 
+#ifdef WASI_RUNTIME
     if (FcDebug() & FC_DBG_SCANV)
 	printf ("\n");
+#endif
 
 
     return ls;
@@ -258,15 +295,19 @@ FcLangNormalize (const FcChar8 *lang)
     llen = strlen ((const char *) s);
     if (llen < 2 || llen > 3)
     {
+#ifdef WASI_RUNTIME
 	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid language tag\n",
 		 lang);
+#endif
 	goto bail0;
     }
     if (territory && (tlen < 2 || tlen > 3) &&
 	!(territory[0] == 'z' && tlen < 5))
     {
+#ifdef WASI_RUNTIME
 	fprintf (stderr, "Fontconfig warning: ignoring %s: not a valid region tag\n",
 		 lang);
+#endif
 	goto bail0;
     }
     if (territory)
@@ -278,8 +319,10 @@ FcLangNormalize (const FcChar8 *lang)
 	goto bail0;
     if (territory)
     {
+#ifdef WASI_RUNTIME
 	if (FcDebug () & FC_DBG_LANGSET)
 	    printf("Checking the existence of %s.orth\n", s);
+#endif
 	if (FcLangSetIndex (s) < 0)
 	{
 	    memmove (territory - 1, territory + tlen, (mlen > 0 ? mlen + 1 : 0) + 1);
@@ -298,8 +341,10 @@ FcLangNormalize (const FcChar8 *lang)
     }
     if (modifier)
     {
+#ifdef WASI_RUNTIME
 	if (FcDebug () & FC_DBG_LANGSET)
 	    printf("Checking the existence of %s.orth\n", s);
+#endif
 	if (FcLangSetIndex (s) < 0)
 	    modifier[-1] = 0;
 	else
@@ -312,8 +357,10 @@ FcLangNormalize (const FcChar8 *lang)
 	    goto bail1;
 	}
     }
+#ifdef WASI_RUNTIME
     if (FcDebug () & FC_DBG_LANGSET)
 	printf("Checking the existence of %s.orth\n", s);
+#endif
     if (FcLangSetIndex (s) < 0)
     {
 	/* there seems no languages matched in orth.
@@ -339,10 +386,12 @@ FcLangNormalize (const FcChar8 *lang)
   bail:
     if (FcDebug () & FC_DBG_LANGSET)
     {
+#ifdef WASI_RUNTIME
 	if (result)
 	    printf ("normalized: %s -> %s\n", lang, result);
 	else
 	    printf ("Unable to normalize %s\n", lang);
+#endif
     }
 
     return result;
@@ -967,9 +1016,11 @@ FcLangSetContains (const FcLangSet *lsa, const FcLangSet *lsb)
 
     if (FcDebug() & FC_DBG_MATCHV)
     {
+#ifdef WASI_RUNTIME
 	printf ("FcLangSet "); FcLangSetPrint (lsa);
 	printf (" contains "); FcLangSetPrint (lsb);
 	printf ("\n");
+#endif
     }
     /*
      * check bitmaps for missing language support
@@ -987,8 +1038,10 @@ FcLangSetContains (const FcLangSet *lsa, const FcLangSet *lsb)
 		    if (!FcLangSetContainsLang (lsa,
 						fcLangCharSets[fcLangCharSetIndicesInv[i*32 + j]].lang))
 		    {
+#ifdef WASI_RUNTIME
 			if (FcDebug() & FC_DBG_MATCHV)
 			    printf ("\tMissing bitmap %s\n", fcLangCharSets[fcLangCharSetIndicesInv[i*32+j]].lang);
+#endif
 			return FcFalse;
 		    }
 		}
@@ -1005,8 +1058,10 @@ FcLangSetContains (const FcLangSet *lsa, const FcLangSet *lsb)
 	    {
 		if (!FcLangSetContainsLang (lsa, extra))
 		{
+#ifdef WASI_RUNTIME
 		    if (FcDebug() & FC_DBG_MATCHV)
 			printf ("\tMissing string %s\n", extra);
+#endif
 		    break;
 		}
 	    }
@@ -1018,28 +1073,6 @@ FcLangSetContains (const FcLangSet *lsa, const FcLangSet *lsb)
     return FcTrue;
 }
 
-FcBool
-FcLangSetSerializeAlloc (FcSerialize *serialize, const FcLangSet *l)
-{
-    if (!FcSerializeAlloc (serialize, l, sizeof (FcLangSet)))
-	return FcFalse;
-    return FcTrue;
-}
-
-FcLangSet *
-FcLangSetSerialize(FcSerialize *serialize, const FcLangSet *l)
-{
-    FcLangSet	*l_serialize = FcSerializePtr (serialize, l);
-
-    if (!l_serialize)
-	return NULL;
-    memset (l_serialize->map, '\0', sizeof (l_serialize->map));
-    memcpy (l_serialize->map, l->map, FC_MIN (sizeof (l_serialize->map), l->map_size * sizeof (l->map[0])));
-    l_serialize->map_size = NUM_LANG_SET_MAP;
-    l_serialize->extra = NULL; /* We don't serialize ls->extra */
-    return l_serialize;
-}
-
 FcStrSet *
 FcLangSetGetLangs (const FcLangSet *ls)
 {
@@ -1105,6 +1138,4 @@ FcLangSetSubtract (const FcLangSet *a, const FcLangSet *b)
 }
 
 #define __fclang__
-#include "fcaliastail.h"
-#include "fcftaliastail.h"
 #undef __fclang__
diff --git a/src/fclist.c b/src/fclist.c
index 053803b..4768c5f 100644
--- a/src/fclist.c
+++ b/src/fclist.c
@@ -269,8 +269,6 @@ FcListValueHash (FcValue    *value)
 	return FcListMatrixHash (v.u.m);
     case FcTypeCharSet:
 	return FcCharSetCount (v.u.c);
-    case FcTypeFTFace:
-	return (intptr_t) v.u.f;
     case FcTypeLangSet:
 	return FcLangSetHash (v.u.l);
     case FcTypeRange:
@@ -488,10 +486,7 @@ FcFontSetList (FcConfig	    *config,
     int             destroy_os = 0;
 
     if (!config)
-    {
-	if (!FcInitBringUptoDate ())
-	    goto bail0;
-    }
+	goto bail0;
     config = FcConfigReference (config);
     if (!config)
 	goto bail0;
@@ -593,10 +588,7 @@ FcFontList (FcConfig	*config,
     int		nsets;
 
     if (!config)
-    {
-	if (!FcInitBringUptoDate ())
-	    return 0;
-    }
+	return 0;
     config = FcConfigReference (config);
     if (!config)
 	return NULL;
@@ -611,5 +603,4 @@ FcFontList (FcConfig	*config,
     return ret;
 }
 #define __fclist__
-#include "fcaliastail.h"
 #undef __fclist__
diff --git a/src/fcmatch.c b/src/fcmatch.c
index 3bc352b..5918bdc 100644
--- a/src/fcmatch.c
+++ b/src/fcmatch.c
@@ -455,11 +455,13 @@ FcCompareValueList (FcObject	     object,
     }
     if (FcDebug () & FC_DBG_MATCHV)
     {
+#ifdef WASI_RUNTIME
 	printf (" %s: %g ", FcObjectName (object), best);
 	FcValueListPrint (v1orig);
 	printf (", ");
 	FcValueListPrint (v2orig);
 	printf ("\n");
+#endif
     }
     if (value)
     {
@@ -535,11 +537,15 @@ FcFontRenderPrepare (FcConfig	    *config,
     FcBool	    variable = FcFalse;
     FcStrBuf        variations;
 
+#ifdef WASI_RUNTIME
     assert (pat != NULL);
     assert (font != NULL);
+#endif
 
     FcPatternObjectGetBool (font, FC_VARIABLE_OBJECT, 0, &variable);
+#ifdef WASI_RUNTIME
     assert (variable != FcDontCare);
+#endif
     if (variable)
 	FcStrBufInit (&variations, NULL, 0);
 
@@ -658,7 +664,9 @@ FcFontRenderPrepare (FcConfig	    *config,
 		double num;
 		FcChar8 temp[128];
 		const char *tag = "    ";
+#ifdef WASI_RUNTIME
 		assert (v.type == FcTypeDouble);
+#endif
 		num = v.u.d;
 		if (variations.len)
 		    FcStrBufChar (&variations, ',');
@@ -739,8 +747,10 @@ FcFontSetMatchInternal (FcFontSet   **sets,
     best = 0;
     if (FcDebug () & FC_DBG_MATCH)
     {
+#ifdef WASI_RUNTIME
 	printf ("Match ");
 	FcPatternPrint (p);
+#endif
     }
     for (set = 0; set < nsets; set++)
     {
@@ -751,19 +761,23 @@ FcFontSetMatchInternal (FcFontSet   **sets,
 	{
 	    if (FcDebug () & FC_DBG_MATCHV)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Font %d ", f);
 		FcPatternPrint (s->fonts[f]);
+#endif
 	    }
 	    if (!FcCompare (p, s->fonts[f], score, result))
 		return 0;
 	    if (FcDebug () & FC_DBG_MATCHV)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Score");
 		for (i = 0; i < PRI_END; i++)
 		{
 		    printf (" %g", score[i]);
 		}
 		printf ("\n");
+#endif
 	    }
 	    for (i = 0; i < PRI_END; i++)
 	    {
@@ -779,6 +793,7 @@ FcFontSetMatchInternal (FcFontSet   **sets,
 	    }
 	}
     }
+#ifdef WASI_RUNTIME
     if (FcDebug () & FC_DBG_MATCH)
     {
 	printf ("Best score");
@@ -830,6 +845,7 @@ FcFontSetMatchInternal (FcFontSet   **sets,
 	if (os)
 	    FcObjectSetDestroy (os);
     }
+#endif
     /* assuming that 'result' is initialized with FcResultNoMatch
      * outside this function */
     if (best)
@@ -847,9 +863,11 @@ FcFontSetMatch (FcConfig    *config,
 {
     FcPattern	    *best, *ret = NULL;
 
+#ifdef WASI_RUNTIME
     assert (sets != NULL);
     assert (p != NULL);
     assert (result != NULL);
+#endif
 
     *result = FcResultNoMatch;
 
@@ -874,8 +892,10 @@ FcFontMatch (FcConfig	*config,
     int		nsets;
     FcPattern   *best, *ret = NULL;
 
+#ifdef WASI_RUNTIME
     assert (p != NULL);
     assert (result != NULL);
+#endif
 
     *result = FcResultNoMatch;
 
@@ -962,8 +982,10 @@ FcSortWalk (FcSortNode **n, int nnode, FcFontSet *fs, FcCharSet **csp, FcBool tr
 	    FcPatternReference (node->pattern);
 	    if (FcDebug () & FC_DBG_MATCHV)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Add ");
 		FcPatternPrint (node->pattern);
+#endif
 	    }
 	    if (!FcFontSetAdd (fs, node->pattern))
 	    {
@@ -1015,9 +1037,11 @@ FcFontSetSort (FcConfig	    *config FC_UNUSED,
     FcBool    	    *patternLangSat;
     FcValue	    patternLang;
 
+#ifdef WASI_RUNTIME
     assert (sets != NULL);
     assert (p != NULL);
     assert (result != NULL);
+#endif
 
     /* There are some implementation that relying on the result of
      * "result" to check if the return value of FcFontSetSort
@@ -1030,8 +1054,10 @@ FcFontSetSort (FcConfig	    *config FC_UNUSED,
 
     if (FcDebug () & FC_DBG_MATCH)
     {
+#ifdef WASI_RUNTIME
 	printf ("Sort ");
 	FcPatternPrint (p);
+#endif
     }
     nnodes = 0;
     for (set = 0; set < nsets; set++)
@@ -1069,20 +1095,24 @@ FcFontSetSort (FcConfig	    *config FC_UNUSED,
 	{
 	    if (FcDebug () & FC_DBG_MATCHV)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Font %d ", f);
 		FcPatternPrint (s->fonts[f]);
+#endif
 	    }
 	    new->pattern = s->fonts[f];
 	    if (!FcCompare (p, new->pattern, new->score, result))
 		goto bail1;
 	    if (FcDebug () & FC_DBG_MATCHV)
 	    {
+#ifdef WASI_RUNTIME
 		printf ("Score");
 		for (i = 0; i < PRI_END; i++)
 		{
 		    printf (" %g", new->score[i]);
 		}
 		printf ("\n");
+#endif
 	    }
 	    *nodep = new;
 	    new++;
@@ -1121,12 +1151,14 @@ FcFontSetSort (FcConfig	    *config FC_UNUSED,
 		    {
 			if (FcDebug () & FC_DBG_MATCHV)
 			{
+#ifdef WASI_RUNTIME
 			    FcChar8 *family;
 			    FcChar8 *style;
 
 			    if (FcPatternGetString (nodeps[f]->pattern, FC_FAMILY, 0, &family) == FcResultMatch &&
 				FcPatternGetString (nodeps[f]->pattern, FC_STYLE, 0, &style) == FcResultMatch)
 				printf ("Font %s:%s matches language %d\n", family, style, i);
+#endif
 			}
 			patternLangSat[i] = FcTrue;
 			satisfies = FcTrue;
@@ -1158,8 +1190,10 @@ FcFontSetSort (FcConfig	    *config FC_UNUSED,
 
     if (FcDebug() & FC_DBG_MATCH)
     {
+#ifdef WASI_RUNTIME
 	printf ("First font ");
 	FcPatternPrint (ret->fonts[0]);
+#endif
     }
     if (ret->nfont > 0)
 	*result = FcResultMatch;
@@ -1184,8 +1218,10 @@ FcFontSort (FcConfig	*config,
     FcFontSet	*sets[2], *ret;
     int		nsets;
 
+#ifdef WASI_RUNTIME
     assert (p != NULL);
     assert (result != NULL);
+#endif
 
     *result = FcResultNoMatch;
 
@@ -1203,5 +1239,4 @@ FcFontSort (FcConfig	*config,
     return ret;
 }
 #define __fcmatch__
-#include "fcaliastail.h"
 #undef __fcmatch__
diff --git a/src/fcmatrix.c b/src/fcmatrix.c
index a6fbca2..4e9c1e9 100644
--- a/src/fcmatrix.c
+++ b/src/fcmatrix.c
@@ -112,5 +112,4 @@ FcMatrixShear (FcMatrix *m, double sh, double sv)
     FcMatrixMultiply (m, &r, m);
 }
 #define __fcmatrix__
-#include "fcaliastail.h"
 #undef __fcmatrix__
diff --git a/src/fcname.c b/src/fcname.c
index 3567656..4fbb1e7 100644
--- a/src/fcname.c
+++ b/src/fcname.c
@@ -26,7 +26,6 @@
 #include <ctype.h>
 #include <stdlib.h>
 #include <string.h>
-#include <stdio.h>
 
 static const FcObjectType FcObjects[] = {
 #define FC_OBJECT(NAME, Type, Cmp) { FC_##NAME, Type },
@@ -250,7 +249,9 @@ FcNameConstantWithObjectCheck (const FcChar8 *string, const char *object, int *r
     {
 	if (strcmp (c->object, object) != 0)
 	{
+#ifdef WASI_RUNTIME
 	    fprintf (stderr, "Fontconfig error: Unexpected constant name `%s' used for object `%s': should be `%s'\n", string, object, c->object);
+#endif
 	    return FcFalse;
 	}
 	*result = c->value;
@@ -582,8 +583,6 @@ FcNameUnparseValue (FcStrBuf	*buf,
 	return FcNameUnparseCharSet (buf, v.u.c);
     case FcTypeLangSet:
 	return FcNameUnparseLangSet (buf, v.u.l);
-    case FcTypeFTFace:
-	return FcTrue;
     case FcTypeRange:
 	sprintf ((char *) temp, "[%g %g]", v.u.r->begin, v.u.r->end);
 	return FcNameUnparseString (buf, temp, 0);
@@ -676,5 +675,4 @@ bail0:
     return 0;
 }
 #define __fcname__
-#include "fcaliastail.h"
 #undef __fcname__
diff --git a/src/fcobjs.c b/src/fcobjs.c
index 33bba8d..225ec8a 100644
--- a/src/fcobjs.c
+++ b/src/fcobjs.c
@@ -49,12 +49,10 @@ FcObjectFini (void)
 {
     struct FcObjectOtherTypeInfo *ots, *ot;
 
-retry:
-    ots = fc_atomic_ptr_get (&other_types);
+    ots = other_types;
     if (!ots)
 	return;
-    if (!fc_atomic_ptr_cmpexch (&other_types, ots, NULL))
-	goto retry;
+    other_types = NULL;
 
     while (ots)
     {
@@ -69,12 +67,9 @@ retry:
 static FcObjectType *
 _FcObjectLookupOtherTypeByName (const char *str, FcObject *id)
 {
-    struct FcObjectOtherTypeInfo *ots, *ot;
-
-retry:
-    ots = fc_atomic_ptr_get (&other_types);
+    struct FcObjectOtherTypeInfo *ot;
 
-    for (ot = ots; ot; ot = ot->next)
+    for (ot = other_types; ot; ot = ot->next)
 	if (0 == strcmp (ot->object.object, str))
 	    break;
 
@@ -86,20 +81,17 @@ retry:
 
 	ot->object.object = (char *) FcStrdup (str);
 	ot->object.type = FcTypeUnknown;
-	ot->id = fc_atomic_int_add (next_id, +1);
+	ot->id = next_id + 1;
 	if (ot->id < (FC_MAX_BASE_OBJECT + FC_EXT_OBJ_INDEX))
 	{
+#ifdef WASI_RUNTIME
 	    fprintf (stderr, "Fontconfig error: No object ID to assign\n");
+#endif
 	    abort ();
 	}
-	ot->next = ots;
 
-	if (!fc_atomic_ptr_cmpexch (&other_types, ots, ot)) {
-	    if (ot->object.object)
-		free (ot->object.object);
-	    free (ot);
-	    goto retry;
-	}
+	ot->next = other_types;
+        other_types = ot;
     }
 
     if (id)
@@ -138,7 +130,7 @@ FcObjectLookupOtherNameById (FcObject id)
 {
     struct FcObjectOtherTypeInfo *ot;
 
-    for (ot = fc_atomic_ptr_get (&other_types); ot; ot = ot->next)
+    for (ot = other_types; ot; ot = ot->next)
 	if (ot->id == id)
 	    return ot->object.object;
 
@@ -156,7 +148,7 @@ FcObjectLookupOtherTypeById (FcObject id)
 {
     struct FcObjectOtherTypeInfo *ot;
 
-    for (ot = fc_atomic_ptr_get (&other_types); ot; ot = ot->next)
+    for (ot = other_types; ot; ot = ot->next)
 	if (ot->id == id)
 	    return &ot->object;
 
@@ -164,5 +156,4 @@ FcObjectLookupOtherTypeById (FcObject id)
 }
 
 
-#include "fcaliastail.h"
 #undef __fcobjs__
diff --git a/src/fcpat.c b/src/fcpat.c
index 2b1a808..d54549e 100644
--- a/src/fcpat.c
+++ b/src/fcpat.c
@@ -21,7 +21,6 @@
  */
 
 #include "fcint.h"
-#include "fcftint.h"
 
 /* Objects MT-safe for readonly access. */
 
@@ -278,8 +277,6 @@ FcValueEqual (FcValue va, FcValue vb)
 	return FcMatrixEqual (va.u.m, vb.u.m);
     case FcTypeCharSet:
 	return FcCharSetEqual (va.u.c, vb.u.c);
-    case FcTypeFTFace:
-	return va.u.f == vb.u.f;
     case FcTypeLangSet:
 	return FcLangSetEqual (va.u.l, vb.u.l);
     case FcTypeRange:
@@ -332,9 +329,6 @@ FcValueHash (const FcValue *v)
 		FcDoubleHash (v->u.m->yy));
     case FcTypeCharSet:
 	return (FcChar32) FcValueCharSet(v)->num;
-    case FcTypeFTFace:
-	return FcStringHash ((const FcChar8 *) ((FT_Face) v->u.f)->family_name) ^
-	       FcStringHash ((const FcChar8 *) ((FT_Face) v->u.f)->style_name);
     case FcTypeLangSet:
 	return FcLangSetHash (FcValueLangSet(v));
     case FcTypeRange:
@@ -373,71 +367,6 @@ FcValueListHash (FcValueListPtr l)
     return hash;
 }
 
-static void *
-FcPatternGetCacheObject (FcPattern *p)
-{
-  /* We use a value to find the cache, instead of the FcPattern object
-   * because the pattern itself may be a cache allocation if we rewrote the path,
-   * so the p may not be in the cached region. */
-  return FcPatternEltValues(&FcPatternElts (p)[0]);
-}
-
-FcPattern *
-FcPatternCacheRewriteFile (const FcPattern *p,
-                           FcCache *cache,
-                           const FcChar8 *relocated_font_file)
-{
-    FcPatternElt *elts = FcPatternElts (p);
-    size_t i,j;
-    FcChar8 *data;
-    FcPattern *new_p;
-    FcPatternElt *new_elts;
-    FcValueList *new_value_list;
-    size_t new_path_len = strlen ((char *)relocated_font_file);
-    FcChar8 *new_path;
-
-    /* Allocate space for the patter, the PatternElt headers and
-     * the FC_FILE FcValueList and path that will be freed with the
-     * cache */
-    data = FcCacheAllocate (cache,
-			    sizeof (FcPattern) +
-			    p->num * sizeof (FcPatternElt) +
-			    sizeof (FcValueList) +
-			    new_path_len + 1);
-
-    new_p = (FcPattern *)data;
-    data += sizeof (FcPattern);
-    new_elts = (FcPatternElt *)(data);
-    data += p->num * sizeof (FcPatternElt);
-    new_value_list = (FcValueList *)data;
-    data += sizeof (FcValueList);
-    new_path = data;
-
-    *new_p = *p;
-    new_p->elts_offset = FcPtrToOffset (new_p, new_elts);
-
-    /* Copy all but the FILE values from the cache */
-    for (i = 0, j = 0; i < p->num; i++)
-    {
-	FcPatternElt *elt = &elts[i];
-	new_elts[j].object = elt->object;
-	if (elt->object != FC_FILE_OBJECT)
-	    new_elts[j++].values = FcPatternEltValues(elt);
-	else
-	    new_elts[j++].values = new_value_list;
-    }
-
-    new_value_list->next = NULL;
-    new_value_list->value.type = FcTypeString;
-    new_value_list->value.u.s = new_path;
-    new_value_list->binding = FcValueBindingWeak;
-
-    /* Add rewritten path at the end */
-    strcpy ((char *)new_path, (char *)relocated_font_file);
-
-    return new_p;
-}
-
 void
 FcPatternDestroy (FcPattern *p)
 {
@@ -447,12 +376,6 @@ FcPatternDestroy (FcPattern *p)
     if (!p)
 	return;
 
-    if (FcRefIsConst (&p->ref))
-    {
-	FcCacheObjectDereference (FcPatternGetCacheObject(p));
-	return;
-    }
-
     if (FcRefDec (&p->ref) != 1)
 	return;
 
@@ -649,9 +572,6 @@ FcPatternObjectListAdd (FcPattern	*p,
     FcPatternElt   *e;
     FcValueListPtr l, *prev;
 
-    if (FcRefIsConst (&p->ref))
-	goto bail0;
-
     /*
      * Make sure the stored type is valid for built-in objects
      */
@@ -659,10 +579,12 @@ FcPatternObjectListAdd (FcPattern	*p,
     {
 	if (!FcObjectValidType (object, l->value.type))
 	{
+#ifdef WASI_RUNTIME
 	    fprintf (stderr,
 		     "Fontconfig warning: FcPattern object %s does not accept value", FcObjectName (object));
 	    FcValuePrintFile (stderr, l->value);
 	    fprintf (stderr, "\n");
+#endif
 	    goto bail0;
 	}
     }
@@ -701,9 +623,6 @@ FcPatternObjectAddWithBinding  (FcPattern	*p,
     FcPatternElt   *e;
     FcValueListPtr new, *prev;
 
-    if (FcRefIsConst (&p->ref))
-	goto bail0;
-
     new = FcValueListCreate ();
     if (!new)
 	goto bail0;
@@ -717,11 +636,13 @@ FcPatternObjectAddWithBinding  (FcPattern	*p,
      */
     if (!FcObjectValidType (object, value.type))
     {
+#ifdef WASI_RUNTIME
 	fprintf (stderr,
 		 "Fontconfig warning: FcPattern object %s does not accept value",
 		 FcObjectName (object));
 	FcValuePrintFile (stderr, value);
 	fprintf (stderr, "\n");
+#endif
 	goto bail1;
     }
 
@@ -929,16 +850,6 @@ FcPatternAddCharSet (FcPattern *p, const char *object, const FcCharSet *c)
     return FcPatternObjectAddCharSet (p, FcObjectFromName (object), c);
 }
 
-FcBool
-FcPatternAddFTFace (FcPattern *p, const char *object, const FT_Face f)
-{
-    FcValue	v;
-
-    v.type = FcTypeFTFace;
-    v.u.f = (void *) f;
-    return FcPatternAdd (p, object, v, FcTrue);
-}
-
 FcBool
 FcPatternObjectAddLangSet (FcPattern *p, FcObject object, const FcLangSet *ls)
 {
@@ -1145,21 +1056,6 @@ FcPatternGetCharSet(const FcPattern *p, const char *object, int id, FcCharSet **
     return FcResultMatch;
 }
 
-FcResult
-FcPatternGetFTFace(const FcPattern *p, const char *object, int id, FT_Face *f)
-{
-    FcValue	v;
-    FcResult	r;
-
-    r = FcPatternGet (p, object, id, &v);
-    if (r != FcResultMatch)
-	return r;
-    if (v.type != FcTypeFTFace)
-	return FcResultTypeMismatch;
-    *f = (FT_Face) v.u.f;
-    return FcResultMatch;
-}
-
 FcResult
 FcPatternGetLangSet(const FcPattern *p, const char *object, int id, FcLangSet **ls)
 {
@@ -1238,10 +1134,7 @@ bail0:
 void
 FcPatternReference (FcPattern *p)
 {
-    if (!FcRefIsConst (&p->ref))
-	FcRefInc (&p->ref);
-    else
-	FcCacheObjectReference (FcPatternGetCacheObject(p));
+    FcRefInc (&p->ref);
 }
 
 FcPattern *
@@ -1468,181 +1361,5 @@ FcPatternIterGetValue (const FcPattern *pat, FcPatternIter *iter, int id, FcValu
     return FcResultNoId;
 }
 
-FcBool
-FcPatternSerializeAlloc (FcSerialize *serialize, const FcPattern *pat)
-{
-    int	i;
-    FcPatternElt    *elts = FcPatternElts(pat);
-
-    if (!FcSerializeAlloc (serialize, pat, sizeof (FcPattern)))
-	return FcFalse;
-    if (!FcSerializeAlloc (serialize, elts, FcPatternObjectCount (pat) * sizeof (FcPatternElt)))
-	return FcFalse;
-    for (i = 0; i < FcPatternObjectCount (pat); i++)
-	if (!FcValueListSerializeAlloc (serialize, FcPatternEltValues(elts+i)))
-	    return FcFalse;
-    return FcTrue;
-}
-
-FcPattern *
-FcPatternSerialize (FcSerialize *serialize, const FcPattern *pat)
-{
-    FcPattern	    *pat_serialized;
-    FcPatternElt    *elts = FcPatternElts (pat);
-    FcPatternElt    *elts_serialized;
-    FcValueList	    *values_serialized;
-    int		    i;
-
-    pat_serialized = FcSerializePtr (serialize, pat);
-    if (!pat_serialized)
-	return NULL;
-    *pat_serialized = *pat;
-    pat_serialized->size = FcPatternObjectCount (pat);
-    FcRefSetConst (&pat_serialized->ref);
-
-    elts_serialized = FcSerializePtr (serialize, elts);
-    if (!elts_serialized)
-	return NULL;
-
-    pat_serialized->elts_offset = FcPtrToOffset (pat_serialized,
-						 elts_serialized);
-
-    for (i = 0; i < FcPatternObjectCount (pat); i++)
-    {
-	values_serialized = FcValueListSerialize (serialize, FcPatternEltValues (elts+i));
-	if (!values_serialized)
-	    return NULL;
-	elts_serialized[i].object = elts[i].object;
-	elts_serialized[i].values = FcPtrToEncodedOffset (&elts_serialized[i],
-							  values_serialized,
-							  FcValueList);
-    }
-    if (FcDebug() & FC_DBG_CACHEV) {
-	printf ("Raw pattern:\n");
-	FcPatternPrint (pat);
-	printf ("Serialized pattern:\n");
-	FcPatternPrint (pat_serialized);
-	printf ("\n");
-    }
-    return pat_serialized;
-}
-
-FcBool
-FcValueListSerializeAlloc (FcSerialize *serialize, const FcValueList *vl)
-{
-    while (vl)
-    {
-	if (!FcSerializeAlloc (serialize, vl, sizeof (FcValueList)))
-	    return FcFalse;
-	switch ((int) vl->value.type) {
-	case FcTypeString:
-	    if (!FcStrSerializeAlloc (serialize, vl->value.u.s))
-		return FcFalse;
-	    break;
-	case FcTypeCharSet:
-	    if (!FcCharSetSerializeAlloc (serialize, vl->value.u.c))
-		return FcFalse;
-	    break;
-	case FcTypeLangSet:
-	    if (!FcLangSetSerializeAlloc (serialize, vl->value.u.l))
-		return FcFalse;
-	    break;
-	case FcTypeRange:
-	    if (!FcRangeSerializeAlloc (serialize, vl->value.u.r))
-		return FcFalse;
-	    break;
-	default:
-	    break;
-	}
-	vl = vl->next;
-    }
-    return FcTrue;
-}
-
-FcValueList *
-FcValueListSerialize (FcSerialize *serialize, const FcValueList *vl)
-{
-    FcValueList	*vl_serialized;
-    FcChar8	*s_serialized;
-    FcCharSet	*c_serialized;
-    FcLangSet	*l_serialized;
-    FcRange	*r_serialized;
-    FcValueList	*head_serialized = NULL;
-    FcValueList	*prev_serialized = NULL;
-
-    while (vl)
-    {
-	vl_serialized = FcSerializePtr (serialize, vl);
-	if (!vl_serialized)
-	    return NULL;
-
-	if (prev_serialized)
-	    prev_serialized->next = FcPtrToEncodedOffset (prev_serialized,
-							  vl_serialized,
-							  FcValueList);
-	else
-	    head_serialized = vl_serialized;
-	
-	vl_serialized->next = NULL;
-	vl_serialized->value.type = vl->value.type;
-	switch ((int) vl->value.type) {
-	case FcTypeInteger:
-	    vl_serialized->value.u.i = vl->value.u.i;
-	    break;
-	case FcTypeDouble:
-	    vl_serialized->value.u.d = vl->value.u.d;
-	    break;
-	case FcTypeString:
-	    s_serialized = FcStrSerialize (serialize, vl->value.u.s);
-	    if (!s_serialized)
-		return NULL;
-	    vl_serialized->value.u.s = FcPtrToEncodedOffset (&vl_serialized->value,
-							     s_serialized,
-							     FcChar8);
-	    break;
-	case FcTypeBool:
-	    vl_serialized->value.u.b = vl->value.u.b;
-	    break;
-	case FcTypeMatrix:
-	    /* can't happen */
-	    break;
-	case FcTypeCharSet:
-	    c_serialized = FcCharSetSerialize (serialize, vl->value.u.c);
-	    if (!c_serialized)
-		return NULL;
-	    vl_serialized->value.u.c = FcPtrToEncodedOffset (&vl_serialized->value,
-							     c_serialized,
-							     FcCharSet);
-	    break;
-	case FcTypeFTFace:
-	    /* can't happen */
-	    break;
-	case FcTypeLangSet:
-	    l_serialized = FcLangSetSerialize (serialize, vl->value.u.l);
-	    if (!l_serialized)
-		return NULL;
-	    vl_serialized->value.u.l = FcPtrToEncodedOffset (&vl_serialized->value,
-							     l_serialized,
-							     FcLangSet);
-	    break;
-	case FcTypeRange:
-	    r_serialized = FcRangeSerialize (serialize, vl->value.u.r);
-	    if (!r_serialized)
-		return NULL;
-	    vl_serialized->value.u.r = FcPtrToEncodedOffset (&vl_serialized->value,
-							     r_serialized,
-							     FcRange);
-	    break;
-	default:
-	    break;
-	}
-	prev_serialized = vl_serialized;
-	vl = vl->next;
-    }
-    return head_serialized;
-}
-
 #define __fcpat__
-#include "fcaliastail.h"
-#include "fcftaliastail.h"
 #undef __fcpat__
diff --git a/src/fcptrlist.c b/src/fcptrlist.c
index bb88832..eaf91b9 100644
--- a/src/fcptrlist.c
+++ b/src/fcptrlist.c
@@ -196,5 +196,4 @@ FcPtrListIterRemove (FcPtrList		*list,
 }
 
 #define __fcplist__
-#include "fcaliastail.h"
 #undef __fcplist__
diff --git a/src/fcrange.c b/src/fcrange.c
index 8689930..8c92b99 100644
--- a/src/fcrange.c
+++ b/src/fcrange.c
@@ -135,26 +135,5 @@ FcRangeHash (const FcRange *r)
     return b ^ (b << 1) ^ (e << 9);
 }
 
-FcBool
-FcRangeSerializeAlloc (FcSerialize *serialize, const FcRange *r)
-{
-    if (!FcSerializeAlloc (serialize, r, sizeof (FcRange)))
-	return FcFalse;
-    return FcTrue;
-}
-
-FcRange *
-FcRangeSerialize (FcSerialize *serialize, const FcRange *r)
-{
-    FcRange *r_serialize = FcSerializePtr (serialize, r);
-
-    if (!r_serialize)
-	return NULL;
-    memcpy (r_serialize, r, sizeof (FcRange));
-
-    return r_serialize;
-}
-
 #define __fcrange__
-#include "fcaliastail.h"
 #undef __fcrange__
diff --git a/src/fcserialize.c b/src/fcserialize.c
index d2f221d..f82cec8 100644
--- a/src/fcserialize.c
+++ b/src/fcserialize.c
@@ -151,5 +151,4 @@ FcStrSerialize (FcSerialize *serialize, const FcChar8 *str)
     strcpy ((char *) str_serialize, (const char *) str);
     return str_serialize;
 }
-#include "fcaliastail.h"
 #undef __fcserialize__
diff --git a/src/fcstr.c b/src/fcstr.c
index cdebe98..0a5ee5f 100644
--- a/src/fcstr.c
+++ b/src/fcstr.c
@@ -966,33 +966,6 @@ bail0:
     return ret;
 }
 
-FcChar8 *
-FcStrCopyFilename (const FcChar8 *s)
-{
-    FcChar8 *new;
-
-    if (*s == '~')
-    {
-	FcChar8	*home = FcConfigHome ();
-	FcChar8	*full;
-	int	size;
-	if (!home)
-	    return NULL;
-	size = strlen ((char *) home) + strlen ((char *) s);
-	full = (FcChar8 *) malloc (size + 1);
-	if (!full)
-	    return NULL;
-	strcpy ((char *) full, (char *) home);
-	strcat ((char *) full, (char *) s + 1);
-	new = FcStrCanonFilename (full);
-	free (full);
-    }
-    else
-	new = FcStrCanonFilename (s);
-
-    return new;
-}
-
 FcChar8 *
 FcStrLastSlash (const FcChar8  *path)
 {
@@ -1152,10 +1125,7 @@ FcStrCanonFilename (const FcChar8 *s)
 	FcChar8	*full;
 	FcChar8 *file;
 
-	FcChar8	cwd[FC_MAX_FILE_LEN + 2];
-	if (getcwd ((char *) cwd, FC_MAX_FILE_LEN) == NULL)
-	    return NULL;
-	full = FcStrBuildFilename (cwd, s, NULL);
+	full = FcStrBuildFilename ((FcChar8*) "/", s, NULL);
 	file = FcStrCanonAbsoluteFilename (full);
 	FcStrFree (full);
 	return file;
@@ -1349,7 +1319,7 @@ FcStrTripleThird (FcChar8 *str)
 FcBool
 FcStrSetAddFilename (FcStrSet *set, const FcChar8 *s)
 {
-    FcChar8 *new = FcStrCopyFilename (s);
+    FcChar8 *new = FcStrCanonFilename (s);
     if (!new)
 	return FcFalse;
     if (!_FcStrSetAppend (set, new))
@@ -1370,13 +1340,13 @@ FcStrSetAddFilenamePairWithSalt (FcStrSet *set, const FcChar8 *a, const FcChar8
 
     if (a)
     {
-	new_a = FcStrCopyFilename (a);
+	new_a = FcStrCanonFilename (a);
 	if (!new_a)
 	    return FcFalse;
     }
     if (b)
     {
-	new_b = FcStrCopyFilename(b);
+	new_b = FcStrCanonFilename(b);
 	if (!new_b)
 	{
 	    if (new_a)
@@ -1544,5 +1514,4 @@ FcStrListDone (FcStrList *list)
 }
 
 #define __fcstr__
-#include "fcaliastail.h"
 #undef __fcstr__
diff --git a/src/fcweight.c b/src/fcweight.c
index 224299e..6b4de81 100644
--- a/src/fcweight.c
+++ b/src/fcweight.c
@@ -45,7 +45,9 @@ static double lerp(double x, int x1, int x2, int y1, int y2)
 {
   int dx = x2 - x1;
   int dy = y2 - y1;
+#ifdef WASI_RUNTIME
   assert (dx > 0 && dy >= 0 && x1 <= x && x <= x2);
+#endif
   return y1 + (x-x1) * dy / dx;
 }
 
@@ -99,5 +101,4 @@ FcWeightToOpenType (int fc_weight)
 }
 
 #define __fcweight__
-#include "fcaliastail.h"
 #undef __fcweight__
